(* events.def
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Definitions for the representation of event values.
 *
 * NOTE: this implementation is of "primitive" events without output guards.
 *)

#ifndef _EVENTS_DEF_
#define _EVENTS_DEF_

#include "types.def"
#include "fgs.def"

(* dirty flags are used to track the state of a synchronization event *)

typedef event_state = enum(2);
typedef dirty_flag = ![event_state];

(* constants for event states *)
#define INIT_EVT	enum(0):event_state
#define WAITING_EVT	enum(1):event_state
#define SYNCHED_EVT	enum(2):event_state


typedef chan = ![    (* all fields are mutable *)
    bool,		(* spin lock *)
    list,		(* sendq head *)
    list,		(* sendq tail *)
    list,		(* recvq head *)
    list		(* recvq tail *)
  ];

#define CH_TRY_LOCK(ch)		BCAS(&0(ch), FALSE, TRUE)
#define CH_CLR_LOCK(ch)		UPDATE(0, ch, TRUE)
#define CH_GET_SENDQ_HD(ch)	SELECT(1, ch)
#define CH_SET_SENDQ_HD(ch,x)	UPDATE(1, ch, x)
#define CH_GET_SENDQ_TL(ch)	SELECT(2, ch)
#define CH_SET_SENDQ_TL(ch,x)	UPDATE(2, ch, x)
#define CH_GET_RECVQ_HD(ch)	SELECT(3, ch)
#define CH_SET_RECVQ_HD(ch,x)	UPDATE(3, ch, x)
#define CH_GET_RECVQ_TL(ch)	SELECT(4, ch)
#define CH_SET_RECVQ_TL(ch,x)	UPDATE(4, ch, x)

typedef sendq_item = [any, fgs, cont(unit)];
typedef recvq_item = [dirty_flag, fgs, cont(any)];

typedef evt_poll_fn = fun(unit / exh -> bool);
typedef evt_do_fn = fun(cont(any) / exh -> unit);
typedef evt_block_fn = fun([dirty_flag, fgs, cont(any)] / exh -> unit);

#define CHOOSE_PAT(ev1, ev2)		CHOOSE(ev1 : evt, ev2 : evt)
#define BEVT_PAT(pollFn, doFn, blkFn)	\
		BEVT(pollFn : evt_poll_fn, doFn : evt_do_fn, blkFn : evt_block_fn)

#endif /* !_EVENTS_DEF_ */
