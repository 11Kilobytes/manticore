/* asm-glue.S
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 */

#include "asm-defs.h"
#include "asm-offsets.h"
#include "registers.h"

#ifndef DIRECT_STYLE

/* register(s) that are unused in manticore's calling convention. */
#define TMP_REG1            %rcx     // specifically must *not* be a callee-saved register.

//  Here's the layout we need upon entering Manticore functions when using CPS.
//  Something important here is that the base pointer is _not_ caller
//  saved once we enter manticore functions generated by LLVM. However,
//  the base pointer _is_ caller saved, and is nessecary to be setup
//  as shown below because MLRISC backend assigns spill slots by offsetting
//  from the base pointer, whereas the LLVM backend soley uses the stack ptr.
//  
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// |   return address for RTS  | <- 16-byte align (RSP starts here)
// | - - - - - - - - - - - - - |
// |                           |
// |      Callee Save Area     |
// |                           |
// | - - - - - - - - - - - - - |
// |                           |  <- Base Pointer
// |                           |
// |      Spill Area           |
// |                           |
// |                           |  <- 8-byte align (RSP is here after ASM_Apply)
// | - - - - - - - - - - - - - |  
// |   future callq PC slot    |  <- 16-byte align once C calls are made
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//  Here's the layout we need upon entering Manticore functions when using DS.
//  We basically just dump all of the registers and write the return address,
//  allowing the functions to setup the frame themselves.
//  
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// |                           |
// |      Callee Save Area     |
// |                           |
// | - - - - - - - - - - - - - |
// |   return address for RTS  | <- 16-byte align (RSP starts here)
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

/* Stack frame layout */
#define RBP_OFF		(1*8)  	/* offset off for saving %rbp */
#define RBX_OFF		(2*8)	/* offset off for saving %rbx */
#define R12_OFF		(3*8)	/* offset off for saving %r12 */
#define R13_OFF		(4*8)	/* offset off for saving %r13 */
#define R14_OFF		(5*8)	/* offset off for saving %r14 */
#define R15_OFF		(6*8)	/* offset off for saving %r15 */
#define CALLEE_END  (7*8)

/* ASM_Apply:
 *
 *	ReturnCode_t ASM_Apply (
 *	    VProc_t *vp,	-- host vproc; in %rdi
 *	    Addr_t cp,		-- code address of function; in %rsi
 *	    Value_t arg,	-- function argument; in %rdx
 *	    Value_t ep,		-- function environment ptr.; in %rcx
 *	    Value_t rk,		-- function return continuation; in %r8
 *	    Value_t ek)		-- function exception continuation; in %r9
 */
	.text
	.p2align 3
	.globl	_GSYM(ASM_Apply)
_GSYM(ASM_Apply):
	/* incoming RSP is 16-byte aligned according to SysV ABI */
	/* save C callee-save registers to frame */
	movq    %rbp, -RBP_OFF(%rsp)
	movq	%rbx, -RBX_OFF(%rsp)
	movq	%r12, -R12_OFF(%rsp)
	movq	%r13, -R13_OFF(%rsp)
	movq	%r14, -R14_OFF(%rsp)
	movq	%r15, -R15_OFF(%rsp)

	/* setup frame for spills */
	leaq    -CALLEE_END(%rsp), %rbp
	subq    $FRAME_SZB, %rsp
	
	/* setup standard arguments to the Manticore function */
	movq	%rdi,VPROC_PTR_REG	/* set vproc pointer */
	movq	%rsi,%r12		/* save code pointer in %r12 */
	movq	%rdx,STD_ARG_REG	/* standard argument */
	movq	%rcx,STD_EP_REG		/* environment pointer */
	movq	%r8,STD_CONT_REG	/* return continuation */	
	movq	%r9,STD_EXH_REG		/* exception continuation */
	/* load Manticore state */
	movq	ALLOC_PTR(VPROC_PTR_REG),ALLOC_PTR_REG	/* load allocation pointer */
	jmp	*%r12


/* code address for uncaught exception continuation */
	.p2align 3
	.globl	_GSYM(ASM_UncaughtExn)
_GSYM(ASM_UncaughtExn):
	movq	$REQ_UncaughtExn, TMP_REG1
	jmp	switch_to_c

/* code address for return continuation */
	.p2align 3
	.globl	_GSYM(ASM_Return)
_GSYM(ASM_Return):
	movq	$REQ_Return, TMP_REG1
	jmp	switch_to_c

/* code address for putting the host vproc to sleep */
	.p2align 3
	.globl	_GSYM(ASM_VProcSleep)
_GSYM(ASM_VProcSleep):
	movq	$REQ_Sleep, TMP_REG1
	jmp	switch_to_c

#ifndef NDEBUG
/* r14 points at the current element of the spill area
 *  r15 points at the last element of the spill area
 */
	.p2align 3
	.globl	_GSYM(ASM_InvalidateSpillArea)
_GSYM(ASM_InvalidateSpillArea):
invalidate_spill_area:
	cmpq	%r14,%r15
	je	continue_to_c
	movq	$0xdeadb,(%r14)
	subq	$8,%r14
	jmp	invalidate_spill_area
#endif
	
    
    
.p2align 3
.globl	_GSYM(ASM_InvokeGC)
_GSYM(ASM_InvokeGC):
/* this version is for MLRISC backend */
    movq	$REQ_GC, TMP_REG1
    jmp     switch_to_c
    
    
    
.p2align 3
.globl	_GSYM(ASM_InvokeGC_LLVM)
_GSYM(ASM_InvokeGC_LLVM):
// this version is for LLVM. we need to save the
// ret addr and pop the frame when we invoke GC
	movq	$REQ_GC, TMP_REG1
    popq    STD_CONT_REG

switch_to_c:
#ifndef NDEBUG
// FIXME: disable this check once we've fixed the issues with missing roots
// consistency check for the garbage collector: overwrite all the entries in the spill area,
// all none of these entries should be live at this point.
//
	movq	%rbp,%r14
	subq	$56,%r14
	movq	%rbp,%r15
	subq	$2104,%r15
	jmp 	invalidate_spill_area
continue_to_c:		
#endif
      /* save Manticore state */
	movq	STD_ARG_REG,STD_ARG(VPROC_PTR_REG)
	movq	STD_EP_REG,STD_EP(VPROC_PTR_REG)
	movq	STD_CONT_REG,STD_CONT(VPROC_PTR_REG)
	movq	STD_EXH_REG,STD_EXH(VPROC_PTR_REG)
	movq	ALLOC_PTR_REG,ALLOC_PTR(VPROC_PTR_REG)
    
    addq   $FRAME_SZB, %rsp       /* unbump stack pointer */
    
    /* restore C callee-save registers.  */
    movq	-RBP_OFF(%rsp),%rbp
	movq	-RBX_OFF(%rsp),%rbx
	movq	-R12_OFF(%rsp),%r12
	movq	-R13_OFF(%rsp),%r13
	movq	-R14_OFF(%rsp),%r14
	movq	-R15_OFF(%rsp),%r15
      /* return request code */
	movq	TMP_REG1,%rax
	ret

#ifdef ENABLE_LOGGING
/* void ASM_GetTimeStamp (void *ts)
 *
 * Fill in the time stamp using a system-dependent call.
 */
	.p2align 3
	.globl	_GSYM(ASM_GetTimeStamp)
_GSYM(ASM_GetTimeStamp):
	pushq	%rbp
	movq	%rsp, %rbp

#if defined(HAVE_MACH_ABSOLUTE_TIME)
    /* ts->ts_mach = mach_absolute_time(); */
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	call	_GSYM(mach_absolute_time)
	movq	%rax, (%rbx)
	addq	$8, %rsp
	popq	%rbx
#elif defined(HAVE_CLOCK_GETTIME)
    /* struct timespec t;
     * clock_gettime (CLOCK_REALTIME, &t);
     * ts->sec = t.tv_sec;
     * ts->frac = t.tv_nsec;
     */
	pushq	%rbx
	movq	%rdi, %rbx
	xorl	%edi, %edi
	subq	$16, %rsp
	movq	%rsp, %rsi
	call	_GSYM(clock_gettime)
	movq	(%rsp), %rax
	movl	%eax, (%rbx)
	movq	8(%rsp), %rax
	movl	%eax, 4(%rbx)
	addq	$16, %rsp
	popq	%rbx
#else
    /* struct timeval t;
     * gettimeofday (&t, 0);
     * ts->sec = t.tv_sec;
     * ts->frac = t.tv_usec;
     */
	pushq	%rbx
	movq	%rdi, %rbx
	leaq	-32(%rbp), %rdi
	subq	$24, %rsp
	xorl	%esi, %esi
	call	_GSYM(gettimeofday)
	movq	-32(%rbp), %rax
	movl	%eax, (%rbx)
	movl	-24(%rbp), %eax
	movl	%eax, 4(%rbx)
	addq	$24, %rsp
	popq	%rbx
#endif

	leave
	ret

#endif /* ENABLE_LOGGING */

#endif /* not DIRECT_STYLE */
