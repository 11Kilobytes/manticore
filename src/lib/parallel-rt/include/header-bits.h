/* header-bits.h
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * The following three objects can occur in the Manticore heap. We pair each with
 * a distinct header format.
 *
 *  NOTE any changes to the format below may require changes to LLVM as well!
 *
 *  Mixed-Type Object: pointer and raw values.
 *
 *  The ID field contains a value generated by HeaderTableStruct, which
 *  is aware of the predefined IDs below.
 *
 * +---------------------------------------------------------------+
 * |  -- 16 bits -- |  -- 32 bits -- | -- 15 bits -- | -- 1 bit -- |
 * |      undef     |     length     |      ID       |      1      |
 * +---------------------------------------------------------------+
 *
 *  Raw-data object: raw values
 *
 * +---------------------------------------------------------------+
 * |  -- 16 bits -- |  -- 32 bits -- | -- 15 bits -- | -- 1 bit -- |
 * |      undef     |     length     |       0       |      1      |
 * +---------------------------------------------------------------+
 *
 *  Vector object: pointer values
 *
 * +---------------------------------------------------------------+
 * |  -- 16 bits -- |  -- 32 bits -- | -- 15 bits -- | -- 1 bit -- |
 * |      undef     |     length     |       1       |      1      |
 * +---------------------------------------------------------------+
 *
 *  Stack continuation object.
 *
 * +---------------------------------------------------------------+
 * |  -- 16 bits -- |  -- 32 bits -- | -- 15 bits -- | -- 1 bit -- |
 * |      undef     |     length     |       2       |      1      |
 * +---------------------------------------------------------------+
 *
 *  Heap-allocated, mutable linked-frame object.
 *
 * +---------------------------------------------------------------+
 * |  -- 16 bits -- |  -- 32 bits -- | -- 15 bits -- | -- 1 bit -- |
 * |      undef     |     length     |       3       |      1      |
 * +---------------------------------------------------------------+
 *
 *
 *  Bit-pattern tuple object: a less-efficient version of Mixed-Type object.
 *
 *  For this type of object, the first 16 words must be specified as a pointer (1)
 *  or non-pointer (0). Any remaining words are assumed to be non-pointer.
 *  The pattern starts with the least-significant bit of the pattern field
 *  indicating whether the first word is a pointer or not.
 * +---------------------------------------------------------------+
 * |  -- 16 bits -- |  -- 32 bits -- | -- 15 bits -- | -- 1 bit -- |
 * |     pattern    |     length     |       4       |      1      |
 * +---------------------------------------------------------------+
 *
 *
 * Proxy continuation:
 *
 * These objects need a special header to inform the GC of which VProc
 * owns the memory associated with this proxy.
 *
 * +---------------------------------------------------------------+
 * |  -- 16 bits -- |  -- 32 bits -- | -- 15 bits -- | -- 1 bit -- |
 * |      undef     |     length     |       5       |      1      |
 * +---------------------------------------------------------------+
 *
 *
 * We also have a header format for forwarding pointers.
 *
 *  Forwarding pointers:
 *
 *  +--------------------------------------------+
 *  |        -- 61 bits --        | -- 3 bits -- |
 *  |  left forward pointer bits  |     000      |
 *  +--------------------------------------------+
 *
 */

#ifndef _HEADER_BITS_H_
#define _HEADER_BITS_H_

/* Tags for forward pointers */
#define FWDPTR_TAG_BITS	3
#define FWDPTR_TAG	0
#define FWDPTR_TAG_MASK	7

/* Tags for Table objects */
#define TABLE_TAG_BITS	1
#define TABLE_TAG	1
#define TABLE_LEN_ID	15
#define TABLE_LEN_LEN	32

#define PROXY_TAG_VAL 5
#define BITPAT_TAG_VAL 4
#define LINKFRAME_TAG_VAL 3
#define STACK_TAG_VAL 2
#define VEC_TAG_VAL 1
#define RAW_TAG_VAL 0

// Mixed object
#define MIXED_HDR(id, len) ((((Word_t)len) << (TABLE_LEN_ID+TABLE_TAG_BITS)) | (((Word_t)id)<< TABLE_TAG_BITS) | TABLE_TAG)

// Vector object
#define VEC_HDR(len)	((((Word_t)len) << (TABLE_LEN_ID+TABLE_TAG_BITS)) | ((VEC_TAG_VAL) << TABLE_TAG_BITS) | TABLE_TAG)

// Raw object
#define RAW_HDR(len)	((((Word_t)len) << (TABLE_LEN_ID+TABLE_TAG_BITS)) | ((RAW_TAG_VAL) << TABLE_TAG_BITS) | TABLE_TAG)

// Stack continuation object
#define STACK_HDR(len)	(((len) << (TABLE_LEN_ID+TABLE_TAG_BITS)) | ((STACK_TAG_VAL) << TABLE_TAG_BITS) | TABLE_TAG)

// Linked-frame object
#define LINKFRAME_HDR(len)	(((len) << (TABLE_LEN_ID+TABLE_TAG_BITS)) | ((LINKFRAME_TAG_VAL) << TABLE_TAG_BITS) | TABLE_TAG)

#define BITPAT_HDR(pat, len) (((pat) << (TABLE_LEN_LEN+TABLE_LEN_ID+TABLE_TAG_BITS)) | ((len) << (TABLE_LEN_ID+TABLE_TAG_BITS)) | (BITPAT_TAG_VAL << TABLE_TAG_BITS) | TABLE_TAG)

// Proxy continuation object
#define PROXY_HDR(len)	((((Word_t)len) << (TABLE_LEN_ID+TABLE_TAG_BITS)) | ((PROXY_TAG_VAL) << TABLE_TAG_BITS) | TABLE_TAG)

#endif /* !_HEADER_BITS_H_ */
