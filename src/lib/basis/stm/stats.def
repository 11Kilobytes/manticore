(* read-set.pml
 *
 * COPYRIGHT (c) 2015 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Macros for keeping track of basic STM statistics
 *)

#ifndef STM_STATS
#define STM_STATS 0

#define COUNT 

#ifdef COUNT

#define BUMP_PABORT let vp : vproc = host_vproc do ccall M_BumpCounter(vp, 0)
#define PRINT_PABORT_COUNT let counter1 : int = ccall M_SumCounter(0) \
                           do ccall M_Print_Int("Partial-Aborts = %d\n", counter1)
#define BUMP_FABORT let vp : vproc = host_vproc do ccall M_BumpCounter(vp, 1)
#define PRINT_FABORT_COUNT let counter2 : int = ccall M_SumCounter(1) \
                           do ccall M_Print_Int("Full-Aborts = %d\n", counter2)                     
#define PRINT_COMBINED let counter1 : int = ccall M_SumCounter(0) \
					   let counter2 : int = ccall M_SumCounter(1) \
					   do ccall M_Print_Int("Total-Aborts = %d\n", I32Add(counter1, counter2))     
#define BUMP_KCOUNT let vp : vproc = host_vproc do ccall M_BumpCounter(vp, 2)
#define PRINT_KCOUNT let counter1 : int = ccall M_SumCounter(2) \
                     do ccall M_Print_Int("FF Matches = %d\n", counter1)     
#define INC_FF(n) let vp : vproc = host_vproc do ccall M_IncCounter(vp, 3, n)
#define PRINT_FF let counter1 : int = ccall M_SumCounter(3) \
                 do ccall M_Print_Int("Fast Forward Checks = %d\n", counter1)                                                                                                           
#else
#define BUMP_PABORT
#define PRINT_PABORT_COUNT
#define BUMP_FABORT
#define PRINT_FABORT_COUNT
#define PRINT_COMBINED 
#define BUMP_KCOUNT
#define PRINT_KCOUNT 
#define INC_FF(n)
#define PRINT_FF
#endif

#endif