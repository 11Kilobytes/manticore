(* Use most significant bit for lock
 * This way we can tell if something is locked *or*
 * newer than our current stamp with one instruction
 *)
(*0x7FFFFFFFFFFFFFFF*)
#define STAMP_BITS (9223372036854775807:long)

(*TVAR fields*)
#define REF_COUNT     3
#define PREV_LOCK     2
#define CURRENT_LOCK  1
#define TVAR_CONTENTS 0

(*read set fields*)
#define KCOUNT     0
#define LONG_PATH  1
#define SHORT_PATH 2
#define TAIL       3

(*WithK fields (WithK of 'a * 'a * 'a * 'a * 'a)*)
#define R_ENTRY_TAG   0
#define R_ENTRY_TVAR  1
#define R_ENTRY_NEXT  2
#define R_ENTRY_K     3
#define R_ENTRY_WS    4
#define R_ENTRY_NEXTK 5

(*fast forward read set*)
#define FF_RS_STAMP  0
#define FF_RS_END    1

(*STAMP RECORD*)
#define THREAD_ID     3
#define START_STAMP 0
#define LOCK_VAL      1
#define OLD_STAMP     2

#define UNBOX 0

(*x >= 0x8000000000000000*)
#define LOCKED(x) U64Gte(x, 9223372036854775808:long)

#define SET_MSB(x) I64OrB(x, 9223372036854775808:long)
#define MAX_STAMP 9223372036854775807:long