(* steal1.hlop
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * To steal a one-toucher future.
 *)

#include "types.def"

define @steal1 (fp : ![any, fun (unit / exh -> any)] / exh : exh) : () =
                  (* state, thunk *)
  let tmp : any = CAS (&0(fp), EMPTY_F, STOLEN_F)
  if Equal (tmp, EMPTY_F) 
    then let f : fun (unit / exh -> any) = #1(fp)
         do #1(fp) := NIL
	 (* need exn handler for thunk. *)
         (* let exh : exh = ... *)
         let result : any = apply f ( (* / exh *))
         let tmpX : any = CAS(&0(fp), STOLEN_F, result)
         if NotEqual (tmpX, STOLEN_F)
           then do #0(fp) := result
                throw tmp (result)
           else return ()
    else return ()
;

(*
  if (BCAS(&(fp->state), EMPTY, STOLEN) {
    f = fp->thunk;
    fp->thunk = NIL;
    result = f();
    tmp = CAS(&(fp->state), STOLEN, result);
    if (tmp != STOLEN) {
      fp->state = result;
      throw tmp result;
    }       
*)
