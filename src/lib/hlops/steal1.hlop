(* steal1.hlop
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * To steal a one-toucher future.
 *)

#include "types.def"
#include "futures.def"

extern void M_Print (void *);
extern void M_PrintLong (void *);

define @steal1 (fp : future / exh : exh) : () =
  let tmp : any = CAS (&0(fp), EMPTY_F, STOLEN_F)
  if Equal (tmp, EMPTY_F) 
    then let f : thunk = #1(fp)
         do #1(fp) := (thunk) $0
	 (* need exn handler for thunk. *)
         (* let exh : exh = ... *)
         do ccall M_Print ("stole future\n\000")
         let resultLocal : any = apply f (UNIT / exh)
         let result : any = promote (resultLocal)
         let tmpX : any = CAS(&0(fp), STOLEN_F, result)
         if Equal (tmpX, STOLEN_F)            
           then return ()
           else do #0(fp) := result
	        let k : cont(any) = (cont(any)) tmpX
                do ccall M_Print ("wake up k\n\000")                
                throw k (result)
    else 
         return ()
;

(*
  if (BCAS(&(fp->state), EMPTY, STOLEN) {
    f = fp->thunk;
    fp->thunk = NIL;
    result = f();
    tmp = CAS(&(fp->state), STOLEN, result);
    if (tmp != STOLEN) {
      fp->state = result;
      throw tmp result;
    }       
*)
