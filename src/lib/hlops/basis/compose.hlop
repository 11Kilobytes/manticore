(* compose.hlop
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 * 
 * A higher-order function composition operator.
 *
 * Given the tuple of functions [f, g], compose returns (f o g),
 * that is, the function that applies g first, then f.
 *
 * Example: If h = compose(sqrt, add1), 
 *          then h(8) = sqrt(add1(8)) = 3.
 *)

#include "types.def"

define inline @compose (fg : [(* f *) fun (any / exh -> any),
                              (* g *) fun (any / exh -> any)] /
                        exh : exh) : fun (any / exh -> any) =
  let f : fun (any / exh -> any) = #0(fg)
  let g : fun (any / exh -> any) = #1(fg)
  fun h (arg: any / exh: exh) : any =
    let res1 : any = apply g (arg / exh)
    let res2 : any = apply f (res1 / exh)
    return (res2)
  return (h)
;

