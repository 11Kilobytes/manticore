(* list-map.hlop
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Built-in list map function.
 *)

#include "types.def"
#include "debugging.def"

define @list-map (arg : [fun (any / exh -> any), list] / exh : exh) : list =

  print_debug("@list-map 0\n\000")           
  
  let f  : fun (any / exh -> any) = #0(arg)
  let xs : list = #1(arg)

  fun mapf (xs : list, acc : list / exh : exh) : list =
    case xs
      of NIL => 
           print_debug("@list-map 1\n\000")           
           let cca : list = @list-rev (acc / exh)
           return (cca)
       | CONS(x:any, tl:list) =>
           print_debug("@list-map 2.1\n\000")           
           let fx : any = apply f (x / exh)
           print_debug("@list-map 2.2\n\000")           
           let newAcc : list = CONS (fx, acc)
           print_debug("@list-map 2.3\n\000")           
           let res : list = apply mapf (tl, newAcc / exh)
           print_debug("@list-map 2.4\n\000")           
           return (res)
     end

   let theAnswer : list = apply mapf (xs, NIL / exh)
   print_debug("@list-map 3\n\000")           
   return (theAnswer)
;
