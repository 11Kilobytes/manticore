(* dequeue.hlop
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Dequeue the next thread from the host-vproc's ready queue.
 *)

#include "runtime-offsets.def"

extern void *VProcDequeue (void *) __attribute__((alloc));

(* this function is the slow-path of dequeue *)
define @dequeue-slow-path (vp : vproc) : rdyq_item =
    case (rdyq_item)vpload(VP_RDYQ_TL, vp)
     of enum(0) =>
	let item : rdyq_item = ccall VProcDequeue(vp)
	  return (item)
      | tl : rdyq_item =>
	do vpstore(VP_RDYQ_TL, vp, enum(0))
	fun loop (lst : rdyq_item, hd : rdyq_item) : rdyq_item =
	      let (hd' : rdyq_item, lst' : rdyq_item) = case lst
		   of QITEM(tid : enum(0), fiber : cont(enum(0)), lst' : rdyq_item) =>
			let hd' : rdyq_item = QITEM(tid, fiber, lst)
			  return (hd', lst')
		  end
	      case lst'
		   of enum(0) => return (hd')
		    | _ => apply loop (lst', hd')
		  end
	let hd : rdyq_item = apply loop (tl, enum(0))
	let link : any = #2(hd)
	do vpstore(VP_RDYQ_HD, vp, link)
	return (hd)
    end
;	  

define inline @dequeue (vp : vproc) : rdyq_item =
    let hd : rdyq_item = vpload(VP_RDYQ_HD, vp)
    case hd
     of QITEM(_, _, link:rdyq_item) =>
	do vpstore(VP_RDYQ_HD, vp, link)
	return (hd)
      | enum(0) =>
	let item : rdyq_item = @dequeue-slow-path(vp)
	return (item)
    end
;

