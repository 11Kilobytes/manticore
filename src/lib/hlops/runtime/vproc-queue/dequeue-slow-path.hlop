(* dequeue.hlop
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Dequeue the next thread from the host-vprocs ready queue.
 *)

#include "runtime-offsets.def"
#include "types.def"

define @reverse-queue (fgs : fgs, fiber : fiber, lst : rdyq_item, rest : rdyq_item / exh : exh) : rdyq_item;

extern void *VProcDequeue (void *) __attribute__((alloc));
extern void M_Print (void *);

(* this function is the slow-path of dequeue *)
define @dequeue-slow-path (vp : vproc / exh : exh) : rdyq_item =
  cont loop () =
     let tl : rdyq_item = vpload (VP_RDYQ_TL, vp)
     case tl of
        QEMPTY =>
	   let sleepKOpt : option = ccall VProcDequeue(vp)
           case sleepKOpt
            of NIL => 
	       (* the queue is nonempty, try again *)
               throw loop ()
	     | SOME (sleepK : rdyq_item) =>
               (* return a fiber that will put the vproc to sleep *)
               return (sleepK)
	   end
      | QITEM (fgs : fgs, fiber : fiber, lst : rdyq_item) =>
          do vpstore (VP_RDYQ_TL, vp, QEMPTY)
          let qitem : rdyq_item = @reverse-queue (fgs, fiber, lst, QEMPTY / exh)
          let item : [fgs, fiber, rdyq_item] = ([fgs, fiber, rdyq_item]) qitem
          let link : rdyq_item = #2 (item)
          do vpstore (VP_RDYQ_HD, vp, link)
          return (qitem)
     end
  throw loop ()
;	  
