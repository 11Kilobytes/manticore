(* locked-queue-enqueue.hlop
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Enqueue an element.
 *)

#include "locked-queue.def"

define inline @spin-lock (lock : spin_lock / exh : exh) : unit;
define inline @spin-unlock (lock : spin_lock / exh : exh) : unit;

define @locked-queue-enqueue (q : locked_queue, elt : any / exh : exh) : () =

  fun queueSnoc (elt : any, q : queue_elt / exh : exh) : () =
      let qElt : queue_elt = galloc (elt, EMPTYQ)
      let qEltRef : ![queue_elt] = galloc (elt)
      UPDATE(QUEUE_ELT_TL, q, qEltRef)

 (* promote elt before entering the lock *)
  let elt : any = promote (elt)

  let spinLock : spin_lock = #0(q)
  let _ : unit = @spin-lock (spinLock / exh)

    let qHdRef : ![queue_elt] = SELECT (LOCKED_QUEUE_HD, q)
    let qTlRef : ![queue_elt] = SELECT (LOCKED_QUEUE_TL, q)
    let qTl : queue_elt = unwrap (qTlRef)
    let qTl : queue_elt = apply queueSnoc (elt, qTl / exh)

    do qTlRef := qTl
    do if Equal (qHdRef, QEMPTY) 
          then    (* the queue was empty *)
               do qHdRef := qTl
               return ()
          else return ()

  let _ : unit = @spin-unlock (spinLock / exh)

  return ()
;
