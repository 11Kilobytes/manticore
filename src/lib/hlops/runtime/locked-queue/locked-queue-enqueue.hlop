(* locked-queue-enqueue.hlop
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Enqueue an element.
 *)

#include "locked-queue.def"
#include "../synch/spin-lock-fn.hlop"
define_spin_lock(lq, locked_queue, LOCKED_QUEUE_LOCK)

extern void M_Print (void *);

define @locked-queue-enqueue (q : locked_queue, elt : any / exh : exh) : () =

 (* promote elt *before* acquiring the lock *)
  let elt : any = promote (elt)

  let _ : unit = @spin-lock-lq (q / exh)

   (* place an element at the end of the queue tail *)
    fun queueSnoc (elt : any, qt : queue_elt / exh : exh) : queue_elt =
	let qElt : queue_elt = galloc (elt, LOCKED_QUEUE_EMPTY)
	do if Equal (qt, LOCKED_QUEUE_EMPTY) 
	      then return () 
	      else let qElt : any = (any)qElt
                   do UPDATE(QUEUE_ELT_TL, qt, qElt)
		   return ()
	return (qElt)

    let qHd : queue_elt = SELECT(LOCKED_QUEUE_HD, q)
    let qTl : queue_elt = SELECT(LOCKED_QUEUE_TL, q)
    let qTl : queue_elt = apply queueSnoc (elt, qTl / exh)

    do UPDATE(LOCKED_QUEUE_TL, q, qTl)
    do if Equal (qHd, LOCKED_QUEUE_EMPTY) 
          then (* the queue was empty *)
               do UPDATE(LOCKED_QUEUE_HD, q, qTl)
               return ()
          else return ()

  let _ : unit = @spin-unlock-lq (q / exh)

  return ()
;
