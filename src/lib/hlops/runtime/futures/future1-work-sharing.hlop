(* future1-work-sharing.hlop
 * 
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Work sharing for one-toucher futures.
 *)

#include "types.def"
#include "locked-queue.def"
#include "futures.def"
#include "tags.def"

extern void *ListVProcs (void *) __attribute__((alloc));
(* debugging *)
extern void M_PrintDebug (void*);
extern void M_Print (void*);

define @assoc-list-lookup (atag : assoc_tag, init : fun(unit / exh -> any), fgs : fgs / exh : exh) : any;

define @future1-work-sharing ( / exh : exh) : future_spawn_fn =

 (* shared queue for the workers *)
  let q : locked_queue = @locked-queue-new ( / exh)

 (* spawn a future *)
  fun spawn (fut : future / exh : exh) : unit = 
     (* wrapper function that touches the future *)
      fun wrapper (_ : unit / exh : exh) : unit =
         (* FIXME: do something about the exception handler *)
          let _ : any = @future1-touch (fut / exh)
          return (UNIT)
     (* construct a fiber for the future and put it on the work queue *)
      let k : fiber = @fiber (wrapper / exh)
      do @locked-queue-enqueue (q, k / exh)
      return (UNIT)

 (* Initialize fiber-group storage. *)
  let parentFGS : fgs = @get-fgs (host_vproc / exh)
 (* fiber group storage for the future scheduler *)
  let parent : option = SOME (parentFGS)
  let fgs : fgs = @new-fgs (TRUE, parent / exh)
 (* add the spawn function to the fiber group storage *)
  fun init (_ : unit / exh : exh) : any = return (spawn)
  let _ : any = @assoc-list-lookup (TAG_SPAWN_FUTURE, init, fgs / exh)

 (* return the scheduler action *)
  fun mkSwitch (self : vproc / exh : exh) : sigact = 
      cont switch (s : signal) =
           cont findWork () =
               let eltOpt : option = @locked-queue-dequeue (q / exh)
               case eltOpt
    	        of NONE => throw findWork ()
		 | SOME (k : fiber) => 
		   @run (self, switch, fgs, k / exh)
               end

           if Equal (s, STOP)
              then throw findWork ()
              else do @locked-queue-enqueue (q, s / exh)
                   let _ : unit = @atomic-yield (self / exh)
                   throw findWork ()
      return (switch)

 (* Initialize the scheduler on the vprocs. *)
  let vps : list = ccall ListVProcs(host_vproc)
  do @scheduler-startup (mkSwitch, fgs, vps / exh)
  return (spawn)
;
