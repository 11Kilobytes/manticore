(* future1-spawn.hlop
 * 
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Spawn a future.
 *)

#include "types.def"
#include "futures.def"

define @future1-spawn (arg : [thunk] / exh : exh) : future =

  let fgs : fgs = @get-fgs (host_vproc / exh)
  let assocListRef : ![assoc_list] = SELECT(ALIST_OFFSET, fgs)
  let spawnFnOpt : option = @assoc-list-lookup (TAG_SPAWN_FUTURE, assocListRef / exh)

 (* get the spawn function for the futures scheduler, creating a new scheduler if this spawn is the first
  * spawn for the thread.
  *)
  let spawnFun : future_spawn_fn = case spawnFnOpt
      of NONE =>
         let spawnFun : future_spawn_fn = @future1-work-sharing ( / exh)
         return (spawnFun)
       | SOME (spawnFn : fun (future -> ())) => return (spawnFn)
      end

  (* allocate the future1 cell
     a future1 cell consists of two words:
       1) a _state_ word, with one of the following values:
            EMPTY_F
            STOLEN_F
            EVAL_F
            FULL      value
            WAITING   cont
       2) a _thunk_ word 
   *)
  let thunk : thunk = #0(arg)
  let cell : future = alloc(EMPTY_F:any, thunk)
  let cell : future = promote(cell)

 (* add the future to the scheduling queue *)
  do apply spawnFun (cell / exh)
 
  return (cell) 
;
