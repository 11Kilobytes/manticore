(* dequeue-with-pred.hlop
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Dequeue the first thread that satisfies the predicate.
 *)

#include "runtime-offsets.def"
#include "types.def"

define @dequeue-slow-path (vp : vproc / exh : exh) : rdyq_item;
define @reverse-queue (fgs : fgs, fiber : fiber, lst : rdyq_item, rest : rdyq_item / exh : exh) : rdyq_item;

define inline @dequeue-with-pred (vp : vproc, pred : fun (fgs / exh -> bool) / exh : exh) : option =
   
  fun isTlEmpty ( / exh : exh) : bool =
      let hd : rdyq_item = vpload (VP_RDYQ_TL, vp)
      case hd
       of QEMPTY => return (TRUE)
	| QITEM (fgs:fgs, k:fiber, link:rdyq_item) => return (FALSE)
      end

  fun reverseQueue (q : rdyq_item, rest : rdyq_item / exh : exh) : rdyq_item =
      case q
       of QEMPTY => return (rest)
	| QITEM (fgs:fgs, k:fiber, link:rdyq_item) => 
           let lst : rdyq_item = @reverse-queue (fgs, k, link, rest / exh)
           return (lst)
      end

 (* search the ready queue (both the head and tail lists) for a thread matching the predicate *)
  fun loop (hd : rdyq_item, front : rdyq_item / exh : exh) : option =
      case hd
       of QITEM (fgs:fgs, k:fiber, link:rdyq_item) => 
           let b : bool = apply pred (fgs / exh)
           if b
              then (* found something that satisfies the predicate *)
                   let lst : rdyq_item = apply reverseQueue (front, link / exh)
                   let item : option = SOME (hd)
                   do vpstore (VP_RDYQ_HD, vp, lst)
                   return (item)
              else (* keep looking *)
                   let front : rdyq_item = QITEM (fgs, k, front)
		   apply loop (link, front / exh)
	| QEMPTY => let b : bool = apply isTlEmpty ( / exh)
                    if b
                       then (* found nothing to match the predicate, so restore the ready queue 
			     *  NOTE: we still need to modify the head, since we could have modified the tail
			     *)
                            let lst : rdyq_item = apply reverseQueue (front, QEMPTY / exh)
                            do vpstore (VP_RDYQ_HD, vp, lst)
                            return (NONE)
                       else (* look at the tail *)
                            let tl : rdyq_item = vpload (VP_RDYQ_TL, vp)
                            let tl : rdyq_item = apply reverseQueue (tl, QEMPTY / exh)
                            do vpstore (VP_RDYQ_TL, vp, QEMPTY)
                            apply loop (tl, front / exh)
      end

  let hd : rdyq_item = vpload (VP_RDYQ_HD, vp)
  apply loop (hd, QEMPTY / exh)
;
