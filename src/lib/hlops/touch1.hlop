(* touch1.hlop
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * To touch a one-toucher future.
 *)

#include "types.def"
#include "futures.def"

define @get-work1 (q : work_queue / exh : exh) : ();

(* extern void M_Print (void * ) *)
(* do ccall M_Print ("\n%%%%%%%%% touch1\n\000") *)

define @touch1 (qf: [work_queue, future] / exh : exh) : any =
  let q : work_queue = #0(qf)
  let fp : future = #1(qf)
  let tmp : any = CAS (&0(fp), EMPTY_F, EVAL_F)
  if Equal (tmp, EMPTY_F)
    then let f : thunk = #1(fp)
         (* may need exn handler for thunk. *)
         (* let exh : exh = ... *)
         let result : any = apply f (UNIT / exh)
         let a : [int] = wrap (1)
         do #0(fp) := result
         return (result)
    else let g : any = #0(fp)
         return (q)

(*  if Equal (tmp, EMPTY_F)
    then let f : thunk = #1(fp)
         do #1(fp) := (thunk) $0
         (* may need exn handler for thunk. *)
         (* let exh : exh = ... *)
         let result : any = apply f (UNIT / exh)
         do #0(fp) := result (* one toucher, multiple touches *)
         return (result)
    else if NotEqual (tmp, STOLEN_F)
           then return (tmp)
           else cont k (result: any) = return (result)
	     let tmpX : any = CAS (&0(fp), STOLEN_F, k)
	     if Equal (tmpX, STOLEN_F)
	       then do @get-work1 (q / exh) (* this should ultimately throw result to k *)
                    return (tmpX) (* is this line unreachable? - ams *)
	       else return (tmpX)
*)
;

(*
  ... original notes from Tues 8/21 ...

  tmp = CAS(&(fp->state), EMPTY_F, EVAL_F);
  if (tmp == EMPTY_F) {
    f = fp->thunk;
    fp->thunk = NIL;
    return f();
  } else if (tmp != STOLEN_F) {
    return tmp;
  } else {
    callcc (fn k =>
      if (BCAS(&(fp->state), STOLEN_F, k)) {
        getWork();
      } else {
        return fp->state;
      })
  }    
*)
