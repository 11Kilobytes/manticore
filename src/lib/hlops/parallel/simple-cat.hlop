(* simple-cat.hlop
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Builds a rope out of two. Does no analysis (hence, simple).
 *)

#include "types.def"
#include "ropes.def"

define @simple-cat (r1 : rope, r2 : rope / exh : exh) : rope =
  fun max (a : int, b : int / exh : exh) : int =
    let chooseA : bool = I32Gt (a, b)
    if chooseA 
      then return (a) 
      else return (b)
  let ml_n : ml_int =
    let ml_n1 : ml_int = @rope-length (r1 / exh)
    let ml_n2 : ml_int = @rope-length (r2 / exh)
    let n1 : int = #0(ml_n1)
    let n2 : int = #0(ml_n2)
    let n : int = I32Add (n1, n2)
    let allocN : ml_int = alloc (n)
    return (allocN)
  let ml_d : ml_int =
    let ml_d1 : ml_int = @rope-depth (r1 / exh)
    let ml_d2 : ml_int = @rope-depth (r2 / exh)
    let d1 : int = #0(ml_d1)
    let d2 : int = #0(ml_d2)
    let maxD : int = apply max (d1, d2 / exh)
    let newD : int = I32Add (maxD, 1)
    let allocD : ml_int = alloc (newD)
    return (allocD)
  return (CAT (ml_n, ml_d, r1, r2))
;

