(* rope-sub.hlop
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * A subscript operator for ropes (which were parrays in the surface program).
 *)

#include "types.def"
#include "ropes.def"

define @rope-sub (rn : [rope, ml_int] / exh : exh) : any =
  fun getFromList (xs : list, n : int / exh : exh) : any =
    case xs
      of NIL => let EmptyList : exn = (exn)$0 (* FIXME *)
                throw exh (EmptyList)
       | CONS (x:any, xs:list) =>
           let isZero : bool = I32Eq (n, 0)
           if isZero
             then return (x)
             else 
               let newN : int = I32Sub (n, 1)
               let res : any = apply getFromList (xs, newN / exh)
               return (res)
    end
  fun getFromRope (r : rope, n : int / exh : exh) : any =
    case r
      of LEAF (len:ml_int, data:list) =>
           let len : int = #0(len)
           let foundIt : bool = I32Lt (n, len)
           if foundIt
             then 
               let res : any = apply getFromList (data, n / exh)
               return (res)
             else (* FIXME *)
               let WrongLeaf : exn = (exn)$0
               throw exh (WrongLeaf)
       | CAT (len:ml_int, depth:ml_int, r1:rope, r2:rope) =>
          let len : int = #0(len) 
          let onTheLeft : bool = I32Lt (n, len)
            if onTheLeft
              then
                let res : any = apply getFromRope (r1, n / exh)
                return (res)
              else
                let newN : int = I32Sub (n, len)
                let res : any = apply getFromRope (r2, newN / exh)
                return (res)
      end
  let r : rope = #0(rn)
  let mln : ml_int = #1(rn)
  let n : int = #0(mln)
  let res : any = apply getFromRope (r, n / exh)
  return (res)
;
