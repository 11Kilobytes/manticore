(* run-cpp_sml.in
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * @configure_input@
 *)

structure RunCPP : sig

    val run : {
	    noLines : bool,	(* if true, then supress #line directives *)
	    defs : (string * string option) list,
	    includes : string list,
	    input : string
	  } -> {inStrm : TextIO.instream, reap : unit -> unit}

  end = struct

    val cppCmd = "@CPP_CMD@"

    fun run {noLines, defs, includes, input} = let
	  fun mkDef (symb, NONE) = "-D" ^ symb
	    | mkDef (symb, SOME s) = String.concat["-D", symb, "=\"", s, "\""]
	  fun mkInclude dir = "-I" ^ dir
	  val args = (List.map mkDef defs)
		@ (List.map mkInclude includes)
		@ [input]
	  val args = if noLines then "-P" :: args else args
	  val proc = Unix.execute(cppCmd, args)
	  val (inStrm, outStrm) = Unix.streamsOf proc
	  in
	    { inStrm = inStrm,
	      reap = fn () => (TextIO.closeOut outStrm; ignore(Unix.reap proc))
	    }
	  end

  end
