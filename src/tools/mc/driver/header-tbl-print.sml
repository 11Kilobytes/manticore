(* header-tbl-print.sml
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Outputs Code for the Garbage Collector Scan files
 * To view the C code generated by this module, use the -saveTemps
 * flag when compiling a program.
 *)

structure PrintTable = 
struct
    
    (* NOTE: very important for table length!! This number
       represents the number of non-mixed header kinds that we have
       manually predefined below. *)
    val predefined = HeaderTableStruct.predefined
    
    (* Headerfiles *)
    fun header (MyoutStrm) = (  
        TextIO.output (MyoutStrm, "#include <stdint.h>\n");
        TextIO.output (MyoutStrm, "#include <stdio.h>\n");
        TextIO.output (MyoutStrm, "\n");
        TextIO.output (MyoutStrm, "#include \"gc-scan.h\"\n");
        TextIO.output (MyoutStrm, "#include \"gc-inline.h\"\n");
        TextIO.output (MyoutStrm, "\n");
        TextIO.output (MyoutStrm, "\n");
        ()
        )
    
    (* pre-defined Minor GC handlers *)
    fun minorpre (MyoutStrm) = (
        TextIO.output (MyoutStrm, "Word_t * minorGCscanRAWpointer (Word_t* nextScan, Word_t **nextW, Addr_t allocSzB, Addr_t nurseryBase) {\n");
        TextIO.output (MyoutStrm, "\n" );
        TextIO.output (MyoutStrm, "Word_t hdr = nextScan[-1];   // get object header\n" );
        TextIO.output (MyoutStrm, "assert (isRawHdr(hdr));\n");
		TextIO.output (MyoutStrm, "return (nextScan + GetLength(hdr));\n");
        TextIO.output (MyoutStrm, "\n");
        TextIO.output (MyoutStrm, "  }\n");
        
        TextIO.output (MyoutStrm, "Word_t * minorGCscanVECTORpointer (Word_t* nextScan, Word_t **nextW, Addr_t allocSzB, Addr_t nurseryBase) {\n");
        TextIO.output (MyoutStrm, "\n");
        TextIO.output (MyoutStrm, "Word_t hdr = nextScan[-1];   // get object header\n" );
        TextIO.output (MyoutStrm, "assert(isVectorHdr(hdr));\n");
        TextIO.output (MyoutStrm, "int len = GetLength(hdr);\n" );
        TextIO.output (MyoutStrm, "for (int i = 0;  i < len;  i++, nextScan++) {\n");
        TextIO.output (MyoutStrm, "    Value_t *scanP = (Value_t *)nextScan;\n");
        TextIO.output (MyoutStrm, "    Value_t v = *scanP;\n");
        TextIO.output (MyoutStrm, "    if (isPtr(v) && inAddrRange(nurseryBase, allocSzB, ValueToAddr(v))) {\n");
        TextIO.output (MyoutStrm, "        *scanP = ForwardObjMinor(v, nextW);\n");
        TextIO.output (MyoutStrm, "    }\n");
        TextIO.output (MyoutStrm, "}\n");
		TextIO.output (MyoutStrm, "return nextScan;\n");
        TextIO.output (MyoutStrm, "}\n");
        TextIO.output (MyoutStrm, "\n");
		
		TextIO.output (MyoutStrm, "Word_t * minorGCscanSTKCONTpointer (Word_t* nextScan, Word_t **nextW, Addr_t allocSzB, Addr_t nurseryBase) {\n");
		TextIO.output (MyoutStrm, "\n");
        TextIO.output (MyoutStrm, "Word_t hdr = nextScan[-1];   // get object header\n" );
        TextIO.output (MyoutStrm, "assert(isStackHdr(hdr));\n");
        TextIO.output (MyoutStrm, "int len = GetLength(hdr);\n");
        TextIO.output (MyoutStrm, "const int expectedLen = 3;\n");
        TextIO.output (MyoutStrm, "assert(len == expectedLen);\n");
        TextIO.output (MyoutStrm, "\n");
        TextIO.output (MyoutStrm, "void* stkPtr = (void*)(nextScan[1]);\n");
        TextIO.output (MyoutStrm, "StackInfo_t* stkInfo = (StackInfo_t*)(nextScan[2]);\n");
        TextIO.output (MyoutStrm, "\n");
        TextIO.output (MyoutStrm, "ScanStackMinor(stkPtr, stkInfo, nurseryBase, allocSzB, nextW);\n");
        TextIO.output (MyoutStrm, "\n");
        TextIO.output (MyoutStrm, "nextScan += expectedLen;\n");
        TextIO.output (MyoutStrm, "return nextScan;\n");
        TextIO.output (MyoutStrm, "  }\n");
        
        TextIO.output (MyoutStrm, "Word_t * minorGCscanLINKFRAMEpointer (Word_t* nextScan, Word_t **nextW, Addr_t allocSzB, Addr_t nurseryBase) {\n");
        TextIO.output (MyoutStrm, "Die(\"unable to scan a link-frame pointer!\");\n");
        TextIO.output (MyoutStrm, "}\n");
        
        TextIO.output (MyoutStrm, "Word_t * minorGCscanBITPATpointer (Word_t* nextScan, Word_t **nextW, Addr_t allocSzB, Addr_t nurseryBase) {\n");
        TextIO.output (MyoutStrm, "Die(\"unable to scan a bit-pattern pointer!\");\n");
        TextIO.output (MyoutStrm, "}\n");
		()
        )


    
    fun minor (MyoutStrm) = let
        val s = HeaderTableStruct.HeaderTable.print (HeaderTableStruct.header)
        fun printmystring [] = ()
            | printmystring ((a,b)::t) = (let
                
				val size = String.size a
                fun lp(0,bites,pos) = ()
                | lp(strlen,bites,pos) =(
                    if (String.compare (substring(bites,strlen-1,1),"1") = EQUAL)
                    then (
                        TextIO.output (MyoutStrm,concat["    v = *(scanP+",Int.toString pos,");\n"]);
                        TextIO.output (MyoutStrm,"   if (inAddrRange(nurseryBase, allocSzB, ValueToAddr(v))) {\n");
                        TextIO.output (MyoutStrm,concat["     *(scanP+",Int.toString pos,") = ForwardObjMinor(v, nextW);\n"]);
                        TextIO.output (MyoutStrm,"  }\n");
                        lp(strlen-1,bites,pos+1)
                        )
                    else 
                        lp(strlen-1,bites,pos+1)
                    )
                in
                TextIO.output (MyoutStrm, concat["Word_t * minorGCscan",Int.toString b,"pointer (Word_t* ptr, Word_t **nextW, Addr_t allocSzB, Addr_t nurseryBase) {\n"]);
                TextIO.output (MyoutStrm, "  \n");
                TextIO.output (MyoutStrm, "  Value_t *scanP = (Value_t *)ptr;\n");
                TextIO.output (MyoutStrm, "  Value_t v = NULL;\n");
                TextIO.output (MyoutStrm, "\n");
                
                lp(size,a,0);
                
				TextIO.output (MyoutStrm, concat["return (ptr+",Int.toString size,");\n"]);
                TextIO.output (MyoutStrm, "}\n");
                TextIO.output (MyoutStrm, "\n"); 
                
                printmystring t
                end
            )
            
    in
        printmystring s;
        ()
    end
    
    
    (* pre-defined Major GC handlers *)
    fun majorpre (MyoutStrm) = (
        TextIO.output (MyoutStrm, "Word_t * majorGCscanRAWpointer (Word_t* nextScan, VProc_t *vp, Addr_t oldSzB, Addr_t heapBase) {\n");
        TextIO.output (MyoutStrm, "\n" );
        TextIO.output (MyoutStrm, "Word_t hdr = nextScan[-1];   // get object header\n" );
        TextIO.output (MyoutStrm, "assert (isRawHdr(hdr));\n");
		TextIO.output (MyoutStrm, "return (nextScan + GetLength(hdr));\n");
        TextIO.output (MyoutStrm, "\n");
        TextIO.output (MyoutStrm, "  }\n");
        
        
        TextIO.output (MyoutStrm, "Word_t * majorGCscanVECTORpointer (Word_t* ptr, VProc_t *vp, Addr_t oldSzB, Addr_t heapBase) {\n");
        TextIO.output (MyoutStrm, "\n");
        TextIO.output (MyoutStrm, "Word_t *nextScan = ptr;\n");
        TextIO.output (MyoutStrm, "Word_t hdr = nextScan[-1];   // get object header\n" );
        TextIO.output (MyoutStrm, "assert (isVectorHdr(hdr));\n");
        TextIO.output (MyoutStrm, "int len = GetLength(hdr); \n");
        
        TextIO.output (MyoutStrm, "for (int i = 0;  i < len;  i++, nextScan++) { \n");
        TextIO.output (MyoutStrm, "    Value_t v = *(Value_t *)nextScan; \n");
        TextIO.output (MyoutStrm, "    if (isPtr(v)) { \n");
        TextIO.output (MyoutStrm, "        if (inAddrRange(heapBase, oldSzB, ValueToAddr(v))) { \n");
        TextIO.output (MyoutStrm, "            *nextScan =(Word_t)ForwardObjMajor(vp, v); \n");
        TextIO.output (MyoutStrm, "        } \n");
        TextIO.output (MyoutStrm, "        else if (inVPHeap(heapBase, (Addr_t)v)) { \n");
        TextIO.output (MyoutStrm, "            // p points to another object in the young region, \n");
        TextIO.output (MyoutStrm, "            // so adjust it. \n");
        TextIO.output (MyoutStrm, "            *nextScan = (Word_t)((Addr_t)v - oldSzB); \n");
        TextIO.output (MyoutStrm, "        } \n");
        TextIO.output (MyoutStrm, "    } \n");
        TextIO.output (MyoutStrm, "} \n");
        TextIO.output (MyoutStrm, "return nextScan; \n");
        TextIO.output (MyoutStrm, "}\n");
        TextIO.output (MyoutStrm, "\n");
		
        
		TextIO.output (MyoutStrm, "Word_t * majorGCscanSTKCONTpointer (Word_t* ptr, VProc_t *vp, Addr_t oldSzB, Addr_t heapBase) {\n");
        TextIO.output (MyoutStrm, "Word_t *nextScan = ptr;\n");
        TextIO.output (MyoutStrm, "Word_t hdr = nextScan[-1];   // get object header\n" );
        TextIO.output (MyoutStrm, "assert (isStackHdr(hdr));\n");
        TextIO.output (MyoutStrm, "int len = GetLength(hdr); \n");
        
        TextIO.output (MyoutStrm, "const int expectedLen = 3; \n");
        TextIO.output (MyoutStrm, "assert(len == expectedLen); \n");
        TextIO.output (MyoutStrm, " \n");
        TextIO.output (MyoutStrm, "void* stkPtr = (void*)(nextScan[1]); \n");
        TextIO.output (MyoutStrm, "StackInfo_t* stkInfo = (StackInfo_t*)(nextScan[2]); \n");
        TextIO.output (MyoutStrm, " \n");
        TextIO.output (MyoutStrm, "ScanStackMajor(stkPtr, stkInfo, heapBase, oldSzB, vp, false); \n");
        TextIO.output (MyoutStrm, " \n");
        TextIO.output (MyoutStrm, "nextScan += expectedLen; \n");
		TextIO.output (MyoutStrm, "return nextScan;\n");
        TextIO.output (MyoutStrm, "}\n");
        
        TextIO.output (MyoutStrm, "Word_t * majorGCscanLINKFRAMEpointer (Word_t* ptr, VProc_t *vp, Addr_t oldSzB, Addr_t heapBase) {\n");
        TextIO.output (MyoutStrm, "Die(\"unable to scan a link-frame pointer!\");\n");
        TextIO.output (MyoutStrm, "}\n");
        
        TextIO.output (MyoutStrm, "Word_t * majorGCscanBITPATpointer (Word_t* ptr, VProc_t *vp, Addr_t oldSzB, Addr_t heapBase) {\n");
        TextIO.output (MyoutStrm, "Die(\"unable to scan a bitpattern pointer!\");\n");
        TextIO.output (MyoutStrm, "}\n");
        ()
        )


    
    fun major (MyoutStrm) = let
        val s = HeaderTableStruct.HeaderTable.print (HeaderTableStruct.header)
        fun printmystring [] = ()
            | printmystring ((a,b)::t) = (let
                    
				val size = String.size a	
                fun lp(0,bites,pos) = ()
                | lp(strlen,bites,pos) =(
                    if (String.compare (substring(bites,strlen-1,1),"1") = EQUAL)
                    then (
                        TextIO.output (MyoutStrm,concat["    v = *(Value_t *)(scanP+",Int.toString pos,");\n"]);
                        TextIO.output (MyoutStrm,"   if (inAddrRange(heapBase, oldSzB, ValueToAddr(v))) {\n");
                        TextIO.output (MyoutStrm,concat["     *(scanP+",Int.toString pos,") = (Word_t)ForwardObjMajor(vp, v);\n"]);
                        TextIO.output (MyoutStrm,"  }\n");
                        TextIO.output (MyoutStrm,"  else if (inVPHeap(heapBase, ValueToAddr(v))) {\n");
                        TextIO.output (MyoutStrm,concat["      *(scanP+",Int.toString pos,") = (Word_t)AddrToValue(ValueToAddr(v) - oldSzB);\n"]);
                        TextIO.output (MyoutStrm,"   }\n");
                        
                        lp(strlen-1,bites,pos+1)
                        )
                    else 
                        lp(strlen-1,bites,pos+1)
                    )
                in
                TextIO.output (MyoutStrm, concat["Word_t * majorGCscan",Int.toString b,"pointer (Word_t* ptr, VProc_t *vp, Addr_t oldSzB, Addr_t heapBase) {\n"]);
                TextIO.output (MyoutStrm, "  \n");
                TextIO.output (MyoutStrm, "  Word_t *scanP = ptr;\n");
                TextIO.output (MyoutStrm, "  Value_t v = NULL;\n");
                TextIO.output (MyoutStrm, "\n");
                
                lp(size,a,0);
                
				TextIO.output (MyoutStrm, concat["return (ptr+",Int.toString size,");\n"]);
                TextIO.output (MyoutStrm, "}\n");
                TextIO.output (MyoutStrm, "\n"); 
                
                printmystring t
                end
            )
            
    in
        printmystring s;
        ()
    end
    
    
        
    (* pre-defined ScanGlobalToSpace GC handlers triggered during Promotion / MajorGC *)
    fun globaltospacepre (MyoutStrm) = (
        TextIO.output (MyoutStrm, "Word_t * ScanGlobalToSpaceRAWfunction (Word_t* scanPtr, VProc_t *vp, Addr_t heapBase)  {\n");
        TextIO.output (MyoutStrm, "Word_t hdr = scanPtr[-1];   // get object header\n" );
        TextIO.output (MyoutStrm, "assert (isRawHdr(hdr));\n");
		TextIO.output (MyoutStrm, "return (scanPtr + GetLength(hdr));\n");
        TextIO.output (MyoutStrm, "}\n");
        
        
        TextIO.output (MyoutStrm, "Word_t * ScanGlobalToSpaceVECTORfunction (Word_t* ptr, VProc_t *vp, Addr_t heapBase) {\n");
        TextIO.output (MyoutStrm, "\n");
        TextIO.output (MyoutStrm, "Word_t *scanPtr = ptr;\n");
        TextIO.output (MyoutStrm, "Word_t hdr = scanPtr[-1];   // get object header\n" );
        TextIO.output (MyoutStrm, "assert (isVectorHdr(hdr));\n");
        TextIO.output (MyoutStrm, "int len = GetLength(hdr); \n");
        
        TextIO.output (MyoutStrm, "for (int i = 0;  i < len;  i++, scanPtr++) { \n");
        TextIO.output (MyoutStrm, "    Value_t *scanP = (Value_t *)scanPtr; \n");
        TextIO.output (MyoutStrm, "    Value_t v = *scanP; \n");
        TextIO.output (MyoutStrm, "    if (isPtr(v) && inVPHeap(heapBase, ValueToAddr(v))) { \n");
        TextIO.output (MyoutStrm, "        *scanP = ForwardObjMajor(vp, v); \n");
        TextIO.output (MyoutStrm, "    } \n");
        TextIO.output (MyoutStrm, "} \n");
        
        TextIO.output (MyoutStrm, "return scanPtr;\n");
        TextIO.output (MyoutStrm, "}\n");
        TextIO.output (MyoutStrm, "\n");
		
        
		TextIO.output (MyoutStrm, "Word_t * ScanGlobalToSpaceSTKCONTfunction (Word_t* ptr, VProc_t *vp, Addr_t heapBase)  {\n");
        TextIO.output (MyoutStrm, "Word_t *scanPtr = ptr;\n");
        TextIO.output (MyoutStrm, "Word_t hdr = scanPtr[-1];   // get object header\n" );
        TextIO.output (MyoutStrm, "assert (isStackHdr(hdr));\n");
        TextIO.output (MyoutStrm, "int len = GetLength(hdr); \n");
        
        TextIO.output (MyoutStrm, "const int expectedLen = 3; \n");
        TextIO.output (MyoutStrm, "assert(len == expectedLen); \n");
        TextIO.output (MyoutStrm, " \n");
        TextIO.output (MyoutStrm, "void* stkPtr = (void*)(scanPtr[1]); \n");
        TextIO.output (MyoutStrm, "StackInfo_t* stkInfo = (StackInfo_t*)(scanPtr[2]); \n");
        TextIO.output (MyoutStrm, " \n");
        TextIO.output (MyoutStrm, "ScanStackMajor(stkPtr, stkInfo, heapBase, 0, vp, true); \n");
        TextIO.output (MyoutStrm, " \n");
        TextIO.output (MyoutStrm, "scanPtr += expectedLen; \n");
        
        TextIO.output (MyoutStrm, "return scanPtr;\n");
        TextIO.output (MyoutStrm, "}\n");
        
        
        TextIO.output (MyoutStrm, "Word_t * ScanGlobalToSpaceLINKFRAMEfunction (Word_t* ptr, VProc_t *vp, Addr_t heapBase)  {\n");
        TextIO.output (MyoutStrm, "Die(\"unable to scan a link-frame pointer!\");\n");
        TextIO.output (MyoutStrm, "}\n");
        
        TextIO.output (MyoutStrm, "Word_t * ScanGlobalToSpaceBITPATfunction (Word_t* ptr, VProc_t *vp, Addr_t heapBase)  {\n");
        TextIO.output (MyoutStrm, "Die(\"unable to scan a bitpattern pointer!\");\n");
        TextIO.output (MyoutStrm, "}\n");
        ()
        )


    
    fun globaltospace (MyoutStrm) = let
        val s = HeaderTableStruct.HeaderTable.print (HeaderTableStruct.header)
        fun printmystring [] = ()
            | printmystring ((a,b)::t) = (let
                    
				val size = String.size a	
                fun lp(0,bites,pos) = ()
                | lp(strlen,bites,pos) =(
                    if (String.compare (substring(bites,strlen-1,1),"1") = EQUAL)
                    then (
                        TextIO.output (MyoutStrm,concat["    v = *(Value_t *)(scanP+",Int.toString pos,");\n"]);
                        TextIO.output (MyoutStrm,"   if (inVPHeap(heapBase, ValueToAddr(v))) {\n");
                        TextIO.output (MyoutStrm,concat["     *(scanP+",Int.toString pos,") = (Word_t)ForwardObjGlobal(vp, v);\n"]);
                        TextIO.output (MyoutStrm,"  }\n");
                        
                        lp(strlen-1,bites,pos+1)
                        )
                    else 
                        lp(strlen-1,bites,pos+1)
                    )
                in
                TextIO.output (MyoutStrm, concat["Word_t * ScanGlobalToSpace",Int.toString b,"function (Word_t* ptr, VProc_t *vp, Addr_t heapBase) {\n"]);
                TextIO.output (MyoutStrm, "  \n");
                TextIO.output (MyoutStrm, "  Word_t *scanP = ptr;\n");
                TextIO.output (MyoutStrm, "  Value_t v = NULL;\n");
                TextIO.output (MyoutStrm, "\n");
                
                lp(size,a,0);
                
				TextIO.output (MyoutStrm, concat["return (ptr+",Int.toString size,");\n"]);
                TextIO.output (MyoutStrm, "}\n");
                TextIO.output (MyoutStrm, "\n"); 
                
                printmystring t
                end
            )
            
    in
        printmystring s;
        ()
    end

    
    (* pre-defined Global GC handlers *)
    fun globalpre (MyoutStrm) = (
        TextIO.output (MyoutStrm, "Word_t * globalGCscanRAWpointer (Word_t* ptr, VProc_t *vp) {\n");
        TextIO.output (MyoutStrm, "\n" );
        TextIO.output (MyoutStrm, "Word_t hdr = ptr[-1];\n");
        TextIO.output (MyoutStrm, "assert (isRawHdr(hdr));\n");
        TextIO.output (MyoutStrm, "\n");
		TextIO.output (MyoutStrm, "return (ptr + GetLength(hdr));\n");
        TextIO.output (MyoutStrm, "}\n");
        
        
        TextIO.output (MyoutStrm, "Word_t * globalGCscanVECTORpointer (Word_t* ptr, VProc_t *vp) {\n");
        TextIO.output (MyoutStrm, "\n");
        TextIO.output (MyoutStrm, "Word_t *scanPtr = ptr;\n");
        TextIO.output (MyoutStrm, "Word_t hdr = scanPtr[-1];\n");
        TextIO.output (MyoutStrm, "int len = GetLength(hdr);\n" );
        TextIO.output (MyoutStrm, "assert (isVectorHdr(hdr));\n");
        
        TextIO.output (MyoutStrm, "for (int i = 0;  i < len;  i++, scanPtr++) { \n");
        TextIO.output (MyoutStrm, "    Value_t *scanP = (Value_t *)scanPtr; \n");
        TextIO.output (MyoutStrm, "    Value_t v = *scanP; \n");
        TextIO.output (MyoutStrm, "    if (isFromSpacePtr(v)) { \n");
        TextIO.output (MyoutStrm, "        *scanP = ForwardObjGlobal(vp, v); \n");
        TextIO.output (MyoutStrm, "    } \n");
        TextIO.output (MyoutStrm, "     \n");
        TextIO.output (MyoutStrm, "    assert (!(isPtr(v) && IS_VPROC_CHUNK(AddrToChunk(ValueToAddr(v))->sts))); \n");
        TextIO.output (MyoutStrm, "} \n");
       
        TextIO.output (MyoutStrm, "return scanPtr;\n");
        TextIO.output (MyoutStrm, "}\n");
        TextIO.output (MyoutStrm, "\n");
		
        
		TextIO.output (MyoutStrm, "Word_t * globalGCscanSTKCONTpointer (Word_t* ptr, VProc_t *vp) {\n");
        TextIO.output (MyoutStrm, "\n");
        TextIO.output (MyoutStrm, "Word_t *scanPtr = ptr;\n");
        TextIO.output (MyoutStrm, "Word_t hdr = scanPtr[-1];\n");
        TextIO.output (MyoutStrm, "int len = GetLength(hdr);\n" );
        TextIO.output (MyoutStrm, "assert (isStackHdr(hdr));\n");
        
        TextIO.output (MyoutStrm, "const int expectedLen = 3; \n");
        TextIO.output (MyoutStrm, "assert(len == expectedLen); \n");
        TextIO.output (MyoutStrm, " \n");
        TextIO.output (MyoutStrm, "void* stkPtr = (void*)(scanPtr[1]); \n");
        TextIO.output (MyoutStrm, "StackInfo_t* stkInfo = (StackInfo_t*)(scanPtr[2]); \n");
        TextIO.output (MyoutStrm, " \n");
        TextIO.output (MyoutStrm, "ScanStackGlobal(stkPtr, stkInfo, vp); \n");
        TextIO.output (MyoutStrm, " \n");
        TextIO.output (MyoutStrm, "scanPtr += expectedLen; \n");
        
        TextIO.output (MyoutStrm, "return scanPtr;\n");
        TextIO.output (MyoutStrm, "}\n");
        
        TextIO.output (MyoutStrm, "Word_t * globalGCscanLINKFRAMEpointer (Word_t* ptr, VProc_t *vp) {\n");
        TextIO.output (MyoutStrm, "Die(\"unable to scan a link-frame pointer!\");\n");
        TextIO.output (MyoutStrm, "}\n");
        
        TextIO.output (MyoutStrm, "Word_t * globalGCscanBITPATpointer (Word_t* ptr, VProc_t *vp) {\n");
        TextIO.output (MyoutStrm, "Die(\"unable to scan a bitpat pointer!\");\n");
        TextIO.output (MyoutStrm, "}\n");
        ()
        )


    
    fun global (MyoutStrm) = let
        val s = HeaderTableStruct.HeaderTable.print (HeaderTableStruct.header)
        fun printmystring [] = ()
            | printmystring ((a,b)::t) = (let
                    
				val size = String.size a	
                fun lp(0,bites,pos) = ()
                | lp(strlen,bites,pos) =(
                    if (String.compare (substring(bites,strlen-1,1),"1") = EQUAL)
                    then (
                        TextIO.output (MyoutStrm,concat["    v = *(Value_t *)(scanP+",Int.toString pos,");\n"]);
                        TextIO.output (MyoutStrm,"   if (isFromSpacePtr(v)) {\n");
                        TextIO.output (MyoutStrm,concat["     *(scanP+",Int.toString pos,") = (Word_t)ForwardObjGlobal(vp, v);\n"]);
                        TextIO.output (MyoutStrm,"  }\n");
                        lp(strlen-1,bites,pos+1)
                        )
                    else 
                        lp(strlen-1,bites,pos+1)
                    )
                in
                TextIO.output (MyoutStrm, concat["Word_t * globalGCscan",Int.toString b,"pointer (Word_t* ptr, VProc_t *vp) {\n"]);
                TextIO.output (MyoutStrm, "  \n");
                TextIO.output (MyoutStrm, "  Word_t *scanP = ptr;\n");
                TextIO.output (MyoutStrm, "  Value_t v = NULL;\n");
                TextIO.output (MyoutStrm, "\n");
                
                lp(size,a,0);
                
				TextIO.output (MyoutStrm, concat["return (ptr+",Int.toString size,");\n"]);
                TextIO.output (MyoutStrm, "}\n");
                TextIO.output (MyoutStrm, "\n"); 
                
                printmystring t
                end
            )
            
    in
        printmystring s;
        ()
    end
    
    fun createtable (MyoutStrm) = (let
        val s = HeaderTableStruct.HeaderTable.print (HeaderTableStruct.header)
        val length = List.length s
        
        fun printtable (listlength,i) = (
            if (listlength = i)
            then ()
            else (
                TextIO.output (MyoutStrm, concat[",{minorGCscan",Int.toString i,"pointer,majorGCscan",Int.toString i,"pointer,globalGCscan",Int.toString i,"pointer,ScanGlobalToSpace",Int.toString i,"function}\n"]);
                printtable(listlength,i+1)
                )
            )
            
        in
        (* NOTE the order here must match up with the object's ID.
        That is, RAW objects have an ID = 0, so it must be at position 0 in this table. *)
        TextIO.output (MyoutStrm, concat["tableentry table[",Int.toString (length+predefined),"] = {\n"]); 
        TextIO.output (MyoutStrm, "{minorGCscanRAWpointer,majorGCscanRAWpointer,globalGCscanRAWpointer,ScanGlobalToSpaceRAWfunction},\n");
        TextIO.output (MyoutStrm, "{minorGCscanVECTORpointer,majorGCscanVECTORpointer,globalGCscanVECTORpointer,ScanGlobalToSpaceVECTORfunction},\n");
		TextIO.output (MyoutStrm, "{minorGCscanSTKCONTpointer,majorGCscanSTKCONTpointer,globalGCscanSTKCONTpointer,ScanGlobalToSpaceSTKCONTfunction},\n");
        TextIO.output (MyoutStrm, "{minorGCscanLINKFRAMEpointer,majorGCscanLINKFRAMEpointer,globalGCscanLINKFRAMEpointer,ScanGlobalToSpaceLINKFRAMEfunction},\n");
        TextIO.output (MyoutStrm, "{minorGCscanBITPATpointer,majorGCscanBITPATpointer,globalGCscanBITPATpointer,ScanGlobalToSpaceBITPATfunction}\n");
        
        printtable (length+predefined,predefined);
        
        TextIO.output (MyoutStrm," };\n"); 
        TextIO.output (MyoutStrm,"\n");
        
        ()
        end
        )        
    
    fun print (path) = let
            val Myout = TextIO.openOut path
        in
            header Myout;
            
            minorpre Myout;
            minor Myout;
            
            majorpre Myout;
            major Myout;
            
            globaltospacepre Myout;
            globaltospace Myout;
            
            globalpre Myout;
            global Myout;
            
            createtable Myout;
            
            TextIO.closeOut(Myout)
        end
    
end
    
