(* header-tbl-print.sml
 *
 * COPYRIGHT (c) 2007 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * Outputs Code for the Garbage Collector Scan files
 * To view the C code generated by this module, use the -saveTemps
 * flag when compiling a program.
 *)

structure PrintTable =
struct

    (* NOTE: very important for table length!! This number
       represents the number of non-mixed header kinds that we have
       manually predefined below. *)
    val predefined = HeaderTableStruct.predefined

    (* Headerfiles *)
    fun header (MyoutStrm) = (
        TextIO.output (MyoutStrm, "#include <stdint.h>\n");
        TextIO.output (MyoutStrm, "#include <stdio.h>\n");
        TextIO.output (MyoutStrm, "\n");
        TextIO.output (MyoutStrm, "#include \"gc-scan.h\"\n");
        TextIO.output (MyoutStrm, "#include \"gc-inline.h\"\n");
        TextIO.output (MyoutStrm, "\n");
        TextIO.output (MyoutStrm, "\n");
        ()
        )


    fun minor (MyoutStrm) = let
        val s = HeaderTableStruct.HeaderTable.print (HeaderTableStruct.header)
        fun printmystring [] = ()
            | printmystring ((a,b)::t) = (let

				val size = String.size a
                fun lp(0,bites,pos) = ()
                | lp(strlen,bites,pos) =(
                    if (String.compare (substring(bites,strlen-1,1),"1") = EQUAL)
                    then (
                        TextIO.output (MyoutStrm,concat["    v = *(scanP+",Int.toString pos,");\n"]);
                        TextIO.output (MyoutStrm,"   if (inAddrRange(nurseryBase, allocSzB, ValueToAddr(v))) {\n");
                        TextIO.output (MyoutStrm,concat["     *(scanP+",Int.toString pos,") = ForwardObjMinor(v, nextW);\n"]);
                        TextIO.output (MyoutStrm,"  }\n");
                        lp(strlen-1,bites,pos+1)
                        )
                    else
                        lp(strlen-1,bites,pos+1)
                    )
                in
                TextIO.output (MyoutStrm, concat["Word_t * minorGCscan",Int.toString b,"pointer (Word_t* ptr, Word_t **nextW, Addr_t allocSzB, Addr_t nurseryBase) {\n"]);
                TextIO.output (MyoutStrm, "  \n");
                TextIO.output (MyoutStrm, "  Value_t *scanP = (Value_t *)ptr;\n");
                TextIO.output (MyoutStrm, "  Value_t v = NULL;\n");
                TextIO.output (MyoutStrm, "\n");

                lp(size,a,0);

				TextIO.output (MyoutStrm, concat["return (ptr+",Int.toString size,");\n"]);
                TextIO.output (MyoutStrm, "}\n");
                TextIO.output (MyoutStrm, "\n");

                printmystring t
                end
            )

    in
        printmystring s;
        ()
    end





    fun major (MyoutStrm) = let
        val s = HeaderTableStruct.HeaderTable.print (HeaderTableStruct.header)
        fun printmystring [] = ()
            | printmystring ((a,b)::t) = (let

				val size = String.size a
                fun lp(0,bites,pos) = ()
                | lp(strlen,bites,pos) =(
                    if (String.compare (substring(bites,strlen-1,1),"1") = EQUAL)
                    then (
                        TextIO.output (MyoutStrm,concat["    v = *(Value_t *)(scanP+",Int.toString pos,");\n"]);
                        TextIO.output (MyoutStrm,"   if (isPtr(v) && inVPHeap(heapBase, ValueToAddr(v))) {\n");
                        TextIO.output (MyoutStrm,concat["     *(scanP+",Int.toString pos,") = (Word_t)ForwardObjMajor(vp, v);\n"]);
                        TextIO.output (MyoutStrm,"  }\n");

                        lp(strlen-1,bites,pos+1)
                        )
                    else
                        lp(strlen-1,bites,pos+1)
                    )
                in
                TextIO.output (MyoutStrm, concat["Word_t * majorGCscan",Int.toString b,"pointer (Word_t* ptr, VProc_t *vp, Addr_t heapBase) {\n"]);
                TextIO.output (MyoutStrm, "  \n");
                TextIO.output (MyoutStrm, "  Word_t *scanP = ptr;\n");
                TextIO.output (MyoutStrm, "  Value_t v = NULL;\n");
                TextIO.output (MyoutStrm, "\n");

                lp(size,a,0);

				TextIO.output (MyoutStrm, concat["return (ptr+",Int.toString size,");\n"]);
                TextIO.output (MyoutStrm, "}\n");
                TextIO.output (MyoutStrm, "\n");

                printmystring t
                end
            )

    in
        printmystring s;
        ()
    end


    fun global (MyoutStrm) = let
        val s = HeaderTableStruct.HeaderTable.print (HeaderTableStruct.header)
        fun printmystring [] = ()
            | printmystring ((a,b)::t) = (let

				val size = String.size a
                fun lp(0,bites,pos) = ()
                | lp(strlen,bites,pos) =(
                    if (String.compare (substring(bites,strlen-1,1),"1") = EQUAL)
                    then (
                        TextIO.output (MyoutStrm,concat["    v = *(Value_t *)(scanP+",Int.toString pos,");\n"]);
                        TextIO.output (MyoutStrm,"   if (isFromSpacePtr(v)) {\n");
                        TextIO.output (MyoutStrm,concat["     *(scanP+",Int.toString pos,") = (Word_t)ForwardObjGlobal(vp, v);\n"]);
                        TextIO.output (MyoutStrm,"  }\n");
                        lp(strlen-1,bites,pos+1)
                        )
                    else
                        lp(strlen-1,bites,pos+1)
                    )
                in
                TextIO.output (MyoutStrm, concat["Word_t * globalGCscan",Int.toString b,"pointer (Word_t* ptr, VProc_t *vp) {\n"]);
                TextIO.output (MyoutStrm, "  \n");
                TextIO.output (MyoutStrm, "  Word_t *scanP = ptr;\n");
                TextIO.output (MyoutStrm, "  Value_t v = NULL;\n");
                TextIO.output (MyoutStrm, "\n");

                lp(size,a,0);

				TextIO.output (MyoutStrm, concat["return (ptr+",Int.toString size,");\n"]);
                TextIO.output (MyoutStrm, "}\n");
                TextIO.output (MyoutStrm, "\n");

                printmystring t
                end
            )

    in
        printmystring s;
        ()
    end

    fun createtable (MyoutStrm) = (let
        val s = HeaderTableStruct.HeaderTable.print (HeaderTableStruct.header)
        val length = List.length s

        fun printtable (listlength,i) = (
            if (listlength = i)
            then ()
            else (
                TextIO.output (MyoutStrm, concat[",{minorGCscan",Int.toString i,"pointer,majorGCscan",Int.toString i,"pointer,globalGCscan",Int.toString i,"pointer}\n"]);
                printtable(listlength,i+1)
                )
            )


        val tableLen = length+predefined
        in
        (* NOTE the order here must match up with the object's ID.
        That is, RAW objects have an ID = 0, so it must be at position 0 in this table.
        Please see minor/major/global-scan.c for the predefined table entry functions below:
        *)
        TextIO.output (MyoutStrm, concat["const int tableMaxID = ", Int.toString tableLen, ";\n"]);
        TextIO.output (MyoutStrm, concat["tableentry table[",Int.toString tableLen,"] = {\n"]);
        TextIO.output (MyoutStrm, "{minorGCscanRAWpointer,majorGCscanRAWpointer,globalGCscanRAWpointer},\n");
        TextIO.output (MyoutStrm, "{minorGCscanVECTORpointer,majorGCscanVECTORpointer,globalGCscanVECTORpointer},\n");
		TextIO.output (MyoutStrm, "{minorGCscanSTKCONTpointer,majorGCscanSTKCONTpointer,globalGCscanSTKCONTpointer},\n");
        TextIO.output (MyoutStrm, "{minorGCscanLINKFRAMEpointer,majorGCscanLINKFRAMEpointer,globalGCscanLINKFRAMEpointer},\n");
        TextIO.output (MyoutStrm, "{minorGCscanBITPATpointer,majorGCscanBITPATpointer,globalGCscanBITPATpointer},\n");
        TextIO.output (MyoutStrm, "{minorGCscanPROXYpointer,majorGCscanPROXYpointer,globalGCscanPROXYpointer}\n");

        printtable (tableLen,predefined);

        TextIO.output (MyoutStrm," };\n");
        TextIO.output (MyoutStrm,"\n");

        ()
        end
        )

    fun print (path) = let
            val Myout = TextIO.openOut path
        in
            header Myout;

            minor Myout;

            major Myout;

            global Myout;

            createtable Myout;

            TextIO.closeOut(Myout)
        end

end
