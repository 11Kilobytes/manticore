MLton r7526M (built Tue Jun  7 08:03:55 CDT 2011 on boot.cs.uchicago.edu)
  created this file on Thu Sep 11 22:28:33 2014.
Do not edit this file.
Flag settings: 
   align: 4
   atMLtons: ()
   chunk: coalesce 4096
   closureConvertGlobalize: true
   closureConvertShrink: true
   codegen: x86
   contifyIntoMain: false
   debug: false
   defaultChar: char8
   defaultWideChar: widechar32
   defaultInt: int32
   defaultReal: real64
   defaultWord: word32
   diag passes: []
   drop passes: []
   elaborate allowConstant (default): false
   elaborate allowConstant (enabled): true
   elaborate allowFFI (default): false
   elaborate allowFFI (enabled): true
   elaborate allowPrim (default): false
   elaborate allowPrim (enabled): true
   elaborate allowOverload (default): false
   elaborate allowOverload (enabled): true
   elaborate allowRebindEquals (default): false
   elaborate allowRebindEquals (enabled): true
   elaborate deadCode (default): false
   elaborate deadCode (enabled): true
   elaborate forceUsed (default): false
   elaborate forceUsed (enabled): true
   elaborate ffiStr (default): 
   elaborate ffiStr (enabled): true
   elaborate nonexhaustiveExnMatch (default): default
   elaborate nonexhaustiveExnMatch (enabled): true
   elaborate nonexhaustiveMatch (default): warn
   elaborate nonexhaustiveMatch (enabled): true
   elaborate redundantMatch (default): warn
   elaborate redundantMatch (enabled): true
   elaborate resolveScope (default): strdec
   elaborate resolveScope (enabled): true
   elaborate sequenceNonUnit (default): ignore
   elaborate sequenceNonUnit (enabled): true
   elaborate warnUnused (default): false
   elaborate warnUnused (enabled): true
   elaborate only: false
   emit main: true
   export header: None
   exn history: false
   generated output format: executable
   gc check: Limit
   indentation: 3
   inlineIntoMain: true
   inlineLeafA: {loops = true, repeat = true, size = Some 20}
   inlineLeafB: {loops = true, repeat = true, size = Some 40}
   inlineNonRec: {small = 60, product = 320}
   input file: <bogus>.sxml
   keep CoreML: false
   keep def use: true
   keep dot: false
   keep Machine: false
   keep passes: []
   keep RSSA: false
   keep SSA: false
   keep SSA2: false
   keep SXML: true
   keep XML: false
   extra_: false
   lib dir: <libDir unset>
   lib target dir: <libTargetDir unset>
   loop passes: 1
   mark cards: true
   max function size: 10000
   mlb path vars: [{var = SML_LIB, path = /home/patrick/hacking/sml/mlton-frontend2/src/lib/basis/sml}]
   native commented: 0
   native live stack: false
   native optimize: 1
   native move hoist: true
   native copy prop: true
   native copy prop cutoff: 1000
   native cutoff: 100
   native live transfer: 8
   native shuffle: true
   native ieee fp: false
   native split: Some 20000
   optimizationPasses: [<sxml::default>, <xml::default>]
   polyvariance: Some {hofo = true, rounds = 2, small = 30, product = 300}
   prefer abs paths: false
   prof passes: []
   profile: None
   profile branch: false
   profile C: []
   profile IL: ProfileSource
   profile include/exclude: []
   profile raise: false
   profile stack: false
   profile val: false
   show basis: None
   show def-use: None
   show types: true
   target: self
   target arch: X86
   target OS: Linux
   type check: false
   verbosity: Pass
   warn unrecognized annotation: true
   warn deprecated features: true
   zone cut depth: 100


Datatypes:
t_0 = Overflow of unit ref
      | Match_0 of unit ref
      | Bind_0 of unit ref
exn = C_0 of unit * t_0
bool = false
       | true


Overflow: Some x_0


Body:
let
   val x_1: unit = 
      let
	 val x_2: exn -> unit = 
	    fn x_3: exn => 
	    let
	       val x_4: word8 vector = 
		  "toplevel handler not installed"
	       val x_5: unit = 
		  MLton_bug (x_4)
	    in
	       x_5
	    end
	 val x_6: (exn -> unit) ref = 
	    Ref_ref[exn -> unit] (x_2)
	 val x_7: unit = 
	    let
	       val x_8: unit = 
		  ()
	       val x_9: unit -> unit = 
		  fn x_10: unit => 
		  let
		     val x_11: word8 vector = 
			"toplevel suffix not installed"
		     val x_12: unit = 
			MLton_bug (x_11)
		  in
		     x_12
		  end
	       val x_13: (unit -> unit) ref = 
		  Ref_ref[unit -> unit] (x_9)
	       val x_14: unit = 
		  ()
	       val x_15: unit ref = 
		  Ref_ref[unit] (x_14)
	       val x_16: t_0 = 
		  Overflow x_15
	       val x_17: unit * t_0 = 
		  (x_8, x_16)
	       val x_0: exn = 
		  C_0 x_17
	       val x_18: unit -> unit = 
		  Ref_deref[unit -> unit] (x_13)
	       val x_19: unit = 
		  ()
	       val x_20: unit = 
		  x_18 x_19
	    in
	       x_20
	    end
	    handle x_21 => let
			      val x_22: exn -> unit = 
				 Ref_deref[exn -> unit] (x_6)
			      val x_23: unit = 
				 x_22 x_21
			   in
			      x_23
			   end
      in
	 x_7
      end
      handle x_24 => let
			val x_25: word8 vector = 
			   "toplevel handler not installed"
			val x_26: unit = 
			   MLton_bug (x_25)
		     in
			x_26
		     end
in
   x_1
end
