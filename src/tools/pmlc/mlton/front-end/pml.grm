(* pml.grm
 *
 * COPYRIGHT (c) 2013 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *)

%name PML;

%header (functor MLParserFun (structure Lex : ANTLR_LEXER
                              structure SourceMap : SOURCE_MAP
                              structure Ast: AST));

%tokens
      : KW__con         ("_con")
      | KW__datatype    ("_datatype")
      | KW__module      ("_module")
      | KW__prim        ("_prim")
      | KW__type        ("_type")
      | KW__val         ("_val")
  (* Getting errors in pml.lex, these seem not to have been pulled in *)
      | PLPAREN         ("(|")
      | PRPAREN         ("|)")
      | PLBRACE         ("{|")
      | PRBRACE         ("|}")
      | PLBRACKET       ("[|")
      | PRBRACKET       ("|]")
      | PWILD           ("?")
      (* | SYMB of CharVector.vector *)
      ;

%import "ml.grm";
%import "bom.grm";

%start program;

topdecnode
        : "_module" BOMId Import* "_prim" "(" BOMDecls ")"
                => (Topdec.PrimModule (BOMId, Vector.fromList Import, Vector.fromList BOMDecls))
        ;

Import
        : "_import" "datatype" ty ("as" BOMId)? "with" ImportCon+ "end"
                => (case Type.node ty
		     of Type.Con(longtycon, tvs) => BOM.Import.makeRegion (
			  BOM.Import.Datatype (tvs, longtycon, SR, ImportCon),
			  posToReg FULL_SPAN)
		      | _ => raise Fail "FIXME"
		    (* end case *))
        | "_import" "exception" longvid ("as" BOMId)? ("of" ty)?
                => (BOM.Import.makeRegion (BOM.Import.Exn (longvid, SR1, SR2), posToReg FULL_SPAN))
        | "_import" "val" longvid ":" ty ("as" BOMId)?
                => (BOM.Import.makeRegion (BOM.Import.Val (longvid, ty, SR), posToReg FULL_SPAN))
        ;

ImportCon
        : "_con" vid ("of" ty)? ("as" BOMId)?
                => (BOM.ImportCon.makeRegion (BOM.ImportCon.T (vid, SR1, SR2), posToReg FULL_SPAN))
        ;

strdecnode
        : "_datatype" tyvarseq tycon "=" "_prim" "(" BOMLongId TyArgs? ")" "with" PrimConDef+ "end"
                => (Strdec.PrimDataType (tyvarseq, tycon, BOMLongId, Option.getOpt (TyArgs, [])))
        | "_type" tyvars tycon "=" "_prim" "(" BOMType ")"
                => (Strdec.PrimTycon (tyvars, tycon, BOMType))
        | "_val" "op"? MLValueId ":" ty "=" "_prim" "(" BOMValueId ")"
                => (Strdec.PrimVal (MLValueId, ty, BOMValueId))
        ;

PrimConDef
        : "_con" vid ("of" ty)? "=" "_prim" "(" BOMId ")"
                => (BOM.PrimConDef.makeRegion (BOM.PrimConDef.T (vid, SR, BOMId), posToReg FULL_SPAN))
        ;

MLValueId
        : SYMID => (Vid.fromSymbol (Symbol.fromString SYMID, posToReg FULL_SPAN))
        | ID => (Vid.fromSymbol (Symbol.fromString ID, posToReg FULL_SPAN))
        | "*" => (Vid.fromSymbol (Symbol.fromString "*", posToReg FULL_SPAN))
        ;

BOMValueId
        : BOMLongId
                => (BOM.BOMValueId.makeRegion (
                      BOM.BOMValueId.LongId BOMLongId,
                      posToReg FULL_SPAN))
        | HLOpQId
                => (BOM.BOMValueId.makeRegion (
                      BOM.BOMValueId.HLOpQId HLOpQId,
                      posToReg FULL_SPAN))
        ;
