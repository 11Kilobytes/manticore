(* bom.grm
 *
 * COPYRIGHT (c) 2012 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *)

%name BOM;

%tokens
  : KW_alloc	("alloc")
(*  | KW_and	("and")       *)
  | KW_apply	("apply")
  | KW___attributes__ ("__attributes__")
(*  | KW_case	("case")    *)
  | KW_ccall	("ccall")		(* should use this! *)
  | KW_cont	("cont")
(*  | KW_datatype ("datatype")    *)
  | KW_define	("define")
(*  | KW_do	("do")        *)
(*  | KW_else	("else")    *)
(*  | KW_end    ("end")       *)
(*  | KW_exception ("exception") *)
  | KW_extern	("extern")
(*  | KW_fun	("fun")       *)
  | KW_host_vproc ("host_vproc")
(*  | KW_if     ("if")      *)
(*  | KW_let	("let")       *)
  | KW_noreturn	("noreturn")
  | KW_nullVP   ("nullVP")
(*  | KW_of     ("of")      *)
  | KW_promote  ("promote")
  | KW_return   ("return")
(*  | KW_then   ("then")    *)
  | KW_throw	("throw")
(*  | KW_type (	) *)
  | KW_typecase ("typecase")
  | KW_vpaddr   ("vpaddr")
  | KW_vpload   ("vpload")
  | KW_vpstore  ("vpstore")
(* BOM type identifiers *)
  | KW_addr	("addr")
  | KW_any	("any")
  | KW_array	("array")
  | KW_bignum	("bignum")
  | KW_exn	("exn")
  | KW_int8	("int8")
  | KW_int16	("int16")
  | KW_int32	("int32")
  | KW_int64	("int64")
  | KW_float32	("float32")
  | KW_float64	("float64")
  | KW_uint8	("uint8")
  | KW_uint16	("uint16")
  | KW_uint32	("uint32")
  | KW_uint64	("uint64")
  | KW_vector	("vector")
  | KW_void	("void")
  | KW_vproc	("vproc")
(* puntuation *)
(*  | LP    ("(")       *)
(*  | RP    (")")       *)
(*  | LB    ("[")       *)
(*  | RB    ("]")       *)
(*  | LCB     ("{")                   *)
(*  | RCB     ("}")                   *)
(*  | HASH    ("#")       *)
 (* | ASTERISK    ("*") *)
(*  | COMMA     (",")       *)
(*  | EQ    ("=")       *)
(*  | COLON     (":")       *)
(*  | SLASH     ("/")       *)
(*  | SEMI    (";")       *)
(*  | BAR     ("|")       *)
(*  | WILD    ("_")       *)
(*  | BANG    ("!")       *)
(*  | AMPERSAND     ("&")       *)
  | LT ("<")
  | GT (">")
(*  | ASSIGN  (":=")      *)
(*  | DARROW  ("=>")      *)
(*  | ARROW     ("->")      *)
(*  | LONGID of string       *)
  | HLID of string		(* "@"ID *)
  | LONG_HLID of string		(* qualified HLID *)
(*  | char of ... *)
(*  | INT of ... *)
(*  | REAL of FloatLit.float    *)
(*  | STRING of string      *)
  | ML_STRING of IntInf.int vector
  | PRIMOP of CharVector.vector
  ;

%defs(
  structure BOM = Ast.AstBOM

  fun optToList NONE = []
    | optToList (SOME xs) = xs

  fun flatten NONE = []
    | flatten (SOME(x, xs)) = x::xs

  fun optToEl (SOME x) = [x]
    | optToEl NONE = []

  fun makeId (regionMaker : ('a * Region.t) -> 'b,
        idFromSymbol : (Symbol.t * Region.t) -> 'a,
        s : string,
        thisSpan : Lex.pos * Lex.pos
      ) : 'b = let
	val thisRegion : Region.t = posToReg thisSpan
	val symbol = Symbol.fromString s
	in
	  regionMaker ((idFromSymbol (symbol, thisRegion)), thisRegion)
	end

  fun mkBomExp (exp, span) = BOM.Exp.makeRegion (exp, posToReg span)

  fun splitLongIdString (id : CharVector.vector) =
	String.fields (fn #"." => true | _ => false) id

  fun makeLongId (longIdFromSymbols : (Symbol.t list * Region.t) -> 'a,
        s : string, thisSpan : Lex.pos * Lex.pos) : 'a =
    longIdFromSymbols (
      map Symbol.fromString (splitLongIdString s), posToReg thisSpan)

  fun intInfFromINT ({digits = ds, negate = isNeg, radix = rad}):IntInf.int =
    let
      val _ = print (String.concat ["parsing int. digits: ", ds, "\n"])
      val scanned = StringCvt.scanString (fn x => IntInf.scan rad x) ds
      val errorMsg = String.concat [
        "Something went wrong. Input ", ds, " isn't a number."
      ]
    in
      case scanned of
         NONE => raise Fail errorMsg
       | SOME(s) => s
   end

  local
    (* fun checkCaseRuleFn (c : BOM.CaseRule.t) : bool = *)
    (*   case Region.Wrap.node c of *)
    (*     BOM.CaseRule.CaseDefault c => false *)
    (*   | _ => true *)

    (* fun checkTyCaseRuleFn (c : BOM.TyCaseRule.t) : bool = *)

    fun applyThunks (caseThunks, acc) =
      case caseThunks of
        thunk::[] => applyThunks ([], (thunk true)::acc)
      | [] => rev acc
      | thunk::thunks => applyThunks (thunks, (thunk false)::acc)


    fun assertDefaultLast (cases : 'a list,
        checkFn : 'a -> bool,
        thisSpan : AntlrStreamPos.pos * AntlrStreamPos.pos) : 'a list =
      if List.null cases then
        []
      else if (List.all checkFn (tl (rev cases))) then
        cases
      else
        ((error (posToReg thisSpan,
          "The default case can only come last"));
        [])

   in
     fun checkCaseRule (caseThunks,
         thisSpan : (AntlrStreamPos.pos * AntlrStreamPos.pos)) =
       assertDefaultLast (applyThunks (caseThunks, []),
         not o BOM.CaseRule.isDefault, thisSpan)
     fun checkTyCaseRule (cases,
         thisSpan : (AntlrStreamPos.pos * AntlrStreamPos.pos)) =
       assertDefaultLast (cases, not o BOM.TyCaseRule.isDefault, thisSpan)
   end

   fun longRuleThunk(longConId : BOM.LongConId.t,
       varPats: BOM.VarPat.t list,
       bomExp : BOM.Exp.t,
       thisSpan) : bool -> BOM.CaseRule.t =
     fn isLast : bool => BOM.CaseRule.makeRegion (BOM.CaseRule.LongRule (
       longConId, varPats, bomExp), posToReg thisSpan)

   fun literalRuleThunk(literal : BOM.Literal.t,
       bomExp : BOM.Exp.t,
       thisSpan) : bool -> BOM.CaseRule.t =
     fn isLast : bool => BOM.CaseRule.makeRegion (BOM.CaseRule.LiteralRule (
       literal, bomExp), posToReg thisSpan)

   fun defaultRuleThunk(varPat : BOM.VarPat.t,
       bomExp : BOM.Exp.t,
       thisSpan) : bool -> BOM.CaseRule.t =
     fn isLast : bool => BOM.CaseRule.makeRegion (BOM.CaseRule.DefaultRule (
       varPat, bomExp), posToReg thisSpan)

   (* fun defaultRuleWildThunk (bomExp : BOM.Exp.t,  *)
   (*     maybeBOMType : BOM.BomType.t option, *)
   (*     thisSpan) : bool -> BOM.CaseRule.t =  *)
   (*   fn isLast : bool => BOM.CaseRule.makeRegion (BOM.caseRule.defaultRule  *)

   fun longOrDefaultRuleThunk(id,
       bomExp : BOM.Exp.t,
       thisSpan) : bool -> BOM.CaseRule.t =
     fn isLast : bool => (if isLast then
       let
         val thisRegion = posToReg thisSpan
         val bomId = BOM.BomId.fromSymbol id (* (Symbol.fromString ID, thisRegion) *)
         val varPat = BOM.VarPat.makeRegion (BOM.VarPat.Var (bomId, NONE),
           thisRegion)
         val _ = print "longOrDefaultRuleThunk: emitting default\n" (* DEBUG *)
       in
         defaultRuleThunk(varPat, bomExp, thisSpan)(true)
       end
     else
       let
         val (singleId, idSpan) = id
         val longConId = BOM.LongConId.fromSymbols ([singleId], idSpan)
         val _ = print "longOrDefaultRuleThunk: emitting long\n" (* DEBUG *)
       in
         longRuleThunk(longConId, []: BOM.VarPat.t list, bomExp, thisSpan)(true)
       end)

);

BOMDecls
	: Definition*
		=> (Definition)
	;

Definition
	(* : "datatype" DataTypeDef ("and" DataTypeDef)* ";" *)
	(* 	=> (BOM.Definition.makeRegion ( *)
	(* 	      BOM.Definition.Datatype (DataTypeDef::SR), *)
	(* 	      posToReg FULL_SPAN)) *)
  : "datatype" BomId (TyParams? "="
      DataTypeDefRHS ("and" DataTypeDef)*
        => (BOM.Definition.makeRegion (
          BOM.Definition.Datatype ((DataTypeDefRHS (
            BomId, optToList TyParams, FULL_SPAN)::SR)),
          posToReg FULL_SPAN))
      | "=" "datatype" LongTyId
      => (BOM.Definition.makeRegion (
          BOM.Definition.DatatypeAlias (BomId, LongTyId),
          posToReg FULL_SPAN))) ";" => (SR)
	| "type" BomId TyParams? "=" BOMType ";"
		=> (BOM.Definition.makeRegion (
		      BOM.Definition.TypeDefn (BomId, optToList TyParams, BOMType),
		      posToReg FULL_SPAN))
	| "define" Attrs HLOpId TyParams? FunParams ReturnTy ("=" BOMExp)? ";"
		=> (BOM.Definition.makeRegion (let
		      val (inputTys, exnTys) = FunParams
		      in (
			BOM.Definition.DefineShortId (
			  SOME Attrs, HLOpId, optToList TyParams, inputTys, exnTys, ReturnTy, SR),
			posToReg FULL_SPAN
		      ) end))
	| "define" HLOpId TyParams? DefineRest
		=> (DefineRest (HLOpId, optToList TyParams, FULL_SPAN))
	| "extern" CReturnTy BomId "(" (CArgTy ("," CArgTy)* => (CArgTy::SR))? ")" Attrs ";"
		=> (BOM.Definition.makeRegion (
		      BOM.Definition.Extern (CReturnTy, BomId, Option.getOpt (SR, []), Attrs),
		      posToReg FULL_SPAN))
	| "fun" FunDef ("and" FunDef)* ";"
		=> (BOM.Definition.makeRegion (
		    BOM.Definition.Fun (FunDef::SR),
		    posToReg FULL_SPAN))
(* FIXME: need to add exception definition *)
(* not used anymore
	| "instance" "type" LongTyId TyArgs ";"
		=> (BOM.Definition.makeRegion (
		      BOM.Definition.InstanceType (LongTyId, TyArgs),
		      posToReg FULL_SPAN))
	| "instance" LongValueId TyArgs ";"
		=> (BOM.Definition.makeRegion (
		      BOM.Definition.Instance (LongValueId, TyArgs),
		      posToReg FULL_SPAN))
*)
	;

(* FIXME: this can be made to work better with DefineShortId above *)
DefineRest
	: FunParams ReturnTy ("=" BOMExp)? ";"
		=> (fn (hlOpId : BOM.HLOpId.t, tyParams, span) =>
      (BOM.Definition.makeRegion (
        let
          val (inputTys, exnTys) = FunParams
        in
          (BOM.Definition.DefineShortId (
            NONE, hlOpId, tyParams, inputTys, exnTys, ReturnTy, SR),
          posToReg span)
        end)))
	| "=" LongValueId ";"
     => (fn (hlOpId, tyParams, span) =>
           BOM.Definition.makeRegion (
             BOM.Definition.DefineLongId (hlOpId, tyParams, LongValueId),
             posToReg FULL_SPAN))
	;

DataTypeDefRHS
  : DataConsDef ("|" DataConsDef)*
   => (fn (bomId, tyParams, thisSpan) =>
     BOM.DataTypeDef.makeRegion (
       BOM.DataTypeDef.ConsDefs (bomId, tyParams, DataConsDef::SR),
       posToReg thisSpan))
  ;

DataTypeDef
  (* : BomId TyParams? "=" DataConsDef ("|" DataConsDef)* *)
  (*     => (BOM.DataTypeDef.makeRegion ( *)
  (*       BOM.DataTypeDef.ConsDefs (BomId, TyParams, DataConsDef::SR), *)
  (*       posToReg FULL_SPAN)) *)
  : BomId TyParams? "=" DataTypeDefRHS
      => (DataTypeDefRHS (BomId, optToList TyParams, FULL_SPAN))
  ;

(* DataTypeDef *)
(*   : BomId TyParams? "=" "datatype" LongTyId *)
(*   (* | BomId TyParams? "=" "datatype" LongTyId *) *)
(*         => (BOM.DataTypeDef.makeRegion *)
(*              (BOM.DataTypeDef.SimpleDef (BomId, TyParams, LongTyId), *)
(*             posToReg FULL_SPAN)) *)
  (* ; *)

DataConsDef
  : BomId ("of" BOMType)?
    => (BOM.DataConsDef.makeRegion
      (BOM.DataConsDef.ConsDef (BomId, SR),
      posToReg FULL_SPAN))
  ;

TyParams
  : "<" TyParam ("," TyParam)* ">"
    => (TyParam::SR)
  ;

TyArgs
  : "<" BOMType ("," BOMType)* ">"
    => (BOMType::SR)
  ;

(* We need to do this because the "id" nonterminal in ml.grm is
actually a LONGID that's been forced to be nonqualified. ID does not
match LONGID in BOM now, so it fails. *)
ShortId
  : ID => (Symbol.fromString ID, posToReg FULL_SPAN)
  ;

idForLongid
  : ID => ([Symbol.fromString ID], posToReg FULL_SPAN)
  ;

BomId
	: ShortId => (BOM.BomId.fromSymbol ShortId)
	;

HLOpId
	: HLID => (BOM.HLOpId.fromSymbol(Symbol.fromString HLID, posToReg FULL_SPAN))
	;

HLOpQId
	: HLID
      => (BOM.HLOpQId.fromSymbols (
        [Symbol.fromString HLID], posToReg FULL_SPAN))
	| LONG_HLID
      => (BOM.HLOpQId.fromSymbols (
       map Symbol.fromString (splitLongIdString LONG_HLID),
       posToReg FULL_SPAN))
	;

TyParam
  : TYVAR
      => (BOM.TyParam.fromSymbol (Symbol.fromString TYVAR, posToReg FULL_SPAN))
  ;

LongTyId
  : longid => (BOM.LongTyId.fromSymbols longid)
  | idForLongid => (BOM.LongTyId.fromSymbols idForLongid)
  ;

(* not reachable!
LongConId
  : longid => (BOM.LongConId.fromSymbols longid)
  | idForLongid => (BOM.LongConId.fromSymbols idForLongid)
  ;
*)

LongValueId
	: longid => (BOM.LongValueId.fromSymbols longid)
	| idForLongid => (BOM.LongValueId.fromSymbols idForLongid)
	;

BOMType
  : TyParam
      => (BOM.BomType.makeRegion (
        BOM.BomType.Param TyParam,
        posToReg FULL_SPAN))
  | LongTyId TyArgs?
      => (BOM.BomType.makeRegion (
        BOM.BomType.LongId (LongTyId, optToList TyArgs),
        posToReg FULL_SPAN))
  | "{" Field ("," Field)* "}"
      => (BOM.BomType.makeRegion (
        BOM.BomType.Record (Field::SR),
        posToReg FULL_SPAN))
  |  "[" BOMType ("," BOMType)* "]"
      => (BOM.BomType.makeRegion (
        BOM.BomType.Tuple (BOMType::SR),
        posToReg FULL_SPAN))
  | DomainTy "->" RangeTy
      => (BOM.BomType.makeRegion (
        BOM.BomType.Fun (
          let
            val (inp : BOM.BomType.t list, exn : BOM.BomType.t list) = DomainTy
          in
            (inp, exn, RangeTy)
          end),
        posToReg FULL_SPAN))
  | "any"
      => (BOM.BomType.makeRegion (BOM.BomType.Any, posToReg FULL_SPAN))
  | "vproc"
      => (BOM.BomType.makeRegion (BOM.BomType.VProc, posToReg FULL_SPAN))
  | "cont" TyArgs?
      => (BOM.BomType.makeRegion (BOM.BomType.Cont (optToList TyArgs),
        posToReg FULL_SPAN))
  | "addr" "<" BOMType ">"
      => (BOM.BomType.makeRegion (BOM.BomType.Addr BOMType, posToReg FULL_SPAN))
  | RawTy
      => (BOM.BomType.makeRegion (BOM.BomType.Raw RawTy, posToReg FULL_SPAN))
  ;

DomainTy
  : "(" BOMType ("," BOMType)* "/" (BOMType ("," BOMType)* => (BOMType::SR))? ")"
      => (BOMType::SR1, Option.getOpt (SR2, []))
  ;

RangeTy
  : %try BOMType
      => ([BOMType])
  | %try "(" BOMType ("," BOMType)* ")"
      => (BOMType::SR)
  ;

Field
  : PosInt ":" BOMType
      => (BOM.Field.makeRegion (
        BOM.Field.Immutable (PosInt, BOMType),
        posToReg FULL_SPAN))
  | PosInt "!" BOMType
      => (BOM.Field.makeRegion (
        BOM.Field.Mutable (PosInt, BOMType),
        posToReg FULL_SPAN))
  ;


PosInt
  : INT
      => (if #negate INT then
        ((error (posToReg FULL_SPAN, "Value must be positive"));
        IntInf.fromInt 0)
      else
        intInfFromINT INT)
  ;


FunDef
  : Attrs? BomId TyParams? "(" Params? ("/" Params)? ")" ReturnTy "=" BOMExp
      => (BOM.FunDef.makeRegion (
        BOM.FunDef.Def (Attrs, BomId, optToList TyParams, optToList Params,
          optToList SR, ReturnTy, BOMExp), posToReg FULL_SPAN))
  ;

Attrs
  : "__attributes__" "(" string ("," string)* ")"
      => (BOM.Attrs.makeRegion (
        BOM.Attrs.T (string::SR),
        posToReg FULL_SPAN))
  ;

BOMExp
	: "let" VarPat ("," VarPat)* "=" RHS BOMExp
		=> (mkBomExp (BOM.Exp.Let (VarPat::SR, RHS, BOMExp), FULL_SPAN))
	| "do" SimpleExp BOMExp
	    => (mkBomExp (BOM.Exp.Do (SimpleExp, BOMExp), FULL_SPAN))
	| "fun" FunDef ("and" FunDef)* BOMExp
	    => (mkBomExp (BOM.Exp.FunExp (FunDef::SR, BOMExp), FULL_SPAN))
	| "cont" BomId "(" Params? ")" "=" BOMExp BOMExp
	    => (mkBomExp (BOM.Exp.ContExp (BomId, optToList Params, BOMExp1, BOMExp2), FULL_SPAN))
	| "if" SimpleExp "then" BOMExp "else" BOMExp
	    => (mkBomExp (BOM.Exp.If (SimpleExp, BOMExp1, BOMExp2), FULL_SPAN))
	| "case" SimpleExp "of" CaseRule ("|" CaseRule)*  "end"
	    => (mkBomExp (
		BOM.Exp.Case (SimpleExp, checkCaseRule (CaseRule::SR, posToReg FULL_SPAN)),
		FULL_SPAN))
	| "typecase" TyParam "of" TyCaseRule ("|" TyCaseRule)* "end"
	    => (mkBomExp (
		BOM.Exp.Typecase (TyParam, TyCaseRule::(checkTyCaseRule (SR, posToReg FULL_SPAN))),
		FULL_SPAN))
	| "apply" LongValueId "(" Args? ("/" Args)? ")"
	    => (mkBomExp (BOM.Exp.Apply (LongValueId, optToList Args, optToList SR), FULL_SPAN))
	| "throw" BomId "(" Args? ")"
	    => (mkBomExp (BOM.Exp.Throw (BomId, optToList Args, FULL_SPAN)))
	| "return" "(" Args? ")"
	    => (mkBomExp (BOM.Exp.Return (optToList Args), FULL_SPAN))
	;

Args
	: SimpleExp ("," SimpleExp)*
		=> (SimpleExp::SR)
	;


RHS
	: BOMExp
		=> (BOM.RHS.makeRegion (BOM.RHS.Composite BOMExp, posToReg FULL_SPAN))
	| SimpleExp
		=> (BOM.RHS.makeRegion (BOM.RHS.Simple SimpleExp, posToReg FULL_SPAN))
	;


PrimOp
	: ShortId => (BOM.PrimOp.fromSymbol ShortId)
	;

SimpleExp
  : PrimOp "(" Args ")"
      => (BOM.SimpleExp.makeRegion (
        BOM.SimpleExp.PrimOp (PrimOp, Args),
        posToReg FULL_SPAN))
  | "alloc" LongValueId "(" Args ")"
      => (BOM.SimpleExp.makeRegion (
        BOM.SimpleExp.AllocId (LongValueId, Args),
        posToReg FULL_SPAN))
  | "alloc" TyArgs "(" Args ")"
      => (BOM.SimpleExp.makeRegion (
        BOM.SimpleExp.AllocType (TyArgs, Args),
        posToReg FULL_SPAN))
  | "#" PosInt "(" SimpleExp ")" (":=" SimpleExp)?
      => (BOM.SimpleExp.makeRegion (
        BOM.SimpleExp.AtIndex (PosInt, SimpleExp, SR),
        posToReg FULL_SPAN))
  | "(" BOMType ")" SimpleExp
      => (BOM.SimpleExp.makeRegion (
        BOM.SimpleExp.TypeCast (BOMType, SimpleExp),
        posToReg FULL_SPAN))
  | "promote" "(" SimpleExp ")"
      => (BOM.SimpleExp.makeRegion (
        BOM.SimpleExp.Promote SimpleExp,
        posToReg FULL_SPAN))
  | "host_vproc"
      => (BOM.SimpleExp.makeRegion (
        BOM.SimpleExp.HostVproc,
        posToReg FULL_SPAN))
  | "vpload" "(" PosInt "," SimpleExp ")"
      => (BOM.SimpleExp.makeRegion (
        BOM.SimpleExp.VpLoad (PosInt, SimpleExp),
        posToReg FULL_SPAN))
  | "vpaddr" "(" PosInt "," SimpleExp ")"
      => (BOM.SimpleExp.makeRegion (
        BOM.SimpleExp.VpAddr (PosInt, SimpleExp),
        posToReg FULL_SPAN))
  | "vpstore" "(" PosInt "," SimpleExp "," SimpleExp ")"
      => (BOM.SimpleExp.makeRegion (
        BOM.SimpleExp.VpStore (PosInt, SimpleExp1, SimpleExp2),
        posToReg FULL_SPAN))
  | LongValueId
      => (BOM.SimpleExp.makeRegion (
        BOM.SimpleExp.Id LongValueId,
        posToReg FULL_SPAN))
  | Literal
      => (BOM.SimpleExp.makeRegion (
        BOM.SimpleExp.Lit Literal,
        posToReg FULL_SPAN))
  | ML_STRING
      => (BOM.SimpleExp.makeRegion (
        BOM.SimpleExp.MLString ML_STRING,
        posToReg FULL_SPAN))
  ;

(* We don't keep track of quite the right regions here *)
CaseRule
	: longid ( "(" VarPat ("," VarPat)* ")" )? "=>" BOMExp
      => (longRuleThunk (
        BOM.LongConId.fromSymbols longid,
        flatten SR,
        BOMExp,
        FULL_SPAN))
	| Literal "=>" BOMExp
      => (literalRuleThunk (Literal, BOMExp, FULL_SPAN))
	| idForLongid "(" VarPat ("," VarPat)* ")" "=>" BOMExp
      => (longRuleThunk (
        BOM.LongConId.fromSymbols idForLongid,
        VarPat::SR,
        BOMExp,
        FULL_SPAN))
	| BomId ":" BOMType "=>" BOMExp
      => (defaultRuleThunk (BOM.VarPat.makeRegion (BOM.VarPat.Var (
        BomId, SOME BOMType), posToReg FULL_SPAN), BOMExp, FULL_SPAN))
  | "_" (":" BOMType)? "=>" BOMExp
      => (defaultRuleThunk (BOM.VarPat.makeRegion (BOM.VarPat.Wild SR,
        posToReg FULL_SPAN), BOMExp, FULL_SPAN))
  | ShortId "=>" BOMExp
      => (longOrDefaultRuleThunk (ShortId, BOMExp, FULL_SPAN))
	;

(* CaseRule *)
(*   : LongConId "(" VarPat ("," VarPat)* ")" "=>" BOMExp *)
(*       => (print "emitting LongConId\n"; BOM.CaseRule.makeRegion ( *)
(*           BOM.CaseRule.LongRule (LongConId, VarPat::SR, BOMExp), *)
(*           posToReg FULL_SPAN)) *)
(*   | %try LongConId "=>" BOMExp *)
(*       => (print "emitting LongRule\n"; BOM.CaseRule.makeRegion ( *)
(*           BOM.CaseRule.LongRule (LongConId, [], BOMExp), *)
(*           posToReg FULL_SPAN)) *)

(*   (* : LongConId ("(" VarPat ("," VarPat)* ")")? "=>" BOMExp *) *)
(*   (*     => (BOM.CaseRule.makeRegion ( *) *)
(*   (*         (BOM.CaseRule.LongRule (LongConId, flatten SR, BOMExp), *) *)
(*   (*         posToReg FULL_SPAN))) *) *)
(*   | Literal "=>" BOMExp *)
(*       => (print "emitting LiteralRule\n";BOM.CaseRule.makeRegion ( *)
(*         BOM.CaseRule.LiteralRule (Literal, BOMExp), *)
(*         posToReg FULL_SPAN)) *)
(*   | %try VarPat "=>" BOMExp *)
(*       => (print "emitting DefaultRule\n"; BOM.CaseRule.makeRegion ( *)
(*         BOM.CaseRule.DefaultRule (VarPat, BOMExp), *)
(*         posToReg FULL_SPAN)) *)

(*   ; *)

(* CaseDefault *)
(*   : VarPat "=>" BOMExp *)
(*       => (BOM.CaseRule.makeRegion ( *)
(*         BOM.CaseRule.DefaultRule (VarPat, BOMExp), *)
(*         posToReg FULL_SPAN)) *)
(*   ; *)

VarPat
  : BomId (":" BOMType)?
      => (BOM.VarPat.makeRegion (
        BOM.VarPat.Var (BomId, SR),
        posToReg FULL_SPAN))
  | "_" (":" BOMType)?
      => (BOM.VarPat.makeRegion (BOM.VarPat.Wild SR, posToReg FULL_SPAN))
  ;

TyCaseRule
  : BOMType "=>" BOMExp
      => (BOM.TyCaseRule.makeRegion (
        BOM.TyCaseRule.TyRule (BOMType, BOMExp),
        posToReg FULL_SPAN))
  | "_" "=>" BOMExp
      => (BOM.TyCaseRule.makeRegion (
        BOM.TyCaseRule.Default BOMExp,
        posToReg FULL_SPAN))

  ;

(* TyCaseDefault *)
(*   : "_" "=>" BOMExp *)
(*       => (BOM.TyCaseRule.makeRegion ( *)
(*         BOM.TyCaseRule.Default BOMExp, *)
(*         posToReg FULL_SPAN)) *)
(*   ; *)

Literal
  : INT
      => (BOM.Literal.makeRegion (
        BOM.Literal.PosInt (    (* FIXME: Not sure if they leave the ~ in "digits"? *)
          let
            val myInt = intInfFromINT INT
            val sign = if (#negate INT) then ~1 else 1
          in
            IntInf.* (myInt, sign)
          end),
        posToReg FULL_SPAN))
  | REAL (* I assume that matching REAL will pull in the "-" *)
      => (BOM.Literal.makeRegion (
        BOM.Literal.Float (Option.valOf (Real.fromString REAL)),
        posToReg FULL_SPAN))
  | string
      => (BOM.Literal.makeRegion (BOM.Literal.String string, posToReg FULL_SPAN))
  | "nullVP"
      => (BOM.Literal.makeRegion (BOM.Literal.NullVP, posToReg FULL_SPAN))
  ;


CReturnTy
  : "void"
      => (BOM.CReturnTy.makeRegion (BOM.CReturnTy.Void, posToReg FULL_SPAN))
  | CArgTy
      => (BOM.CReturnTy.makeRegion (
        BOM.CReturnTy.CArg CArgTy,
        posToReg FULL_SPAN))
  ;

CArgTy
  : RawTy
      => (BOM.CArgTy.makeRegion (BOM.CArgTy.Raw RawTy, posToReg FULL_SPAN))
  | "void" "*"
      => (BOM.CArgTy.makeRegion (BOM.CArgTy.VoidPointer, posToReg FULL_SPAN))
  ;

RawTy
  : "int8"
    => (BOM.RawTy.makeRegion (BOM.RawTy.Int8, posToReg FULL_SPAN))
  | "uint8"
    => (BOM.RawTy.makeRegion (BOM.RawTy.Uint8, posToReg FULL_SPAN))
  | "int16"
    => (BOM.RawTy.makeRegion (BOM.RawTy.Int16, posToReg FULL_SPAN))
  | "uint16"
    => (BOM.RawTy.makeRegion (BOM.RawTy.Uint16, posToReg FULL_SPAN))
  | "int32"
    => (BOM.RawTy.makeRegion (BOM.RawTy.Int32, posToReg FULL_SPAN))
  | "uint32"
    => (BOM.RawTy.makeRegion (BOM.RawTy.Uint32, posToReg FULL_SPAN))
  | "int64"
    => (BOM.RawTy.makeRegion (BOM.RawTy.Int64, posToReg FULL_SPAN))
  | "uint64"
    => (BOM.RawTy.makeRegion (BOM.RawTy.Uint64, posToReg FULL_SPAN))
  | "float32"
    => (BOM.RawTy.makeRegion (BOM.RawTy.Float32, posToReg FULL_SPAN))
  | "float64"
    => (BOM.RawTy.makeRegion (BOM.RawTy.Float64, posToReg FULL_SPAN))
  ;

ReturnTy
  : "noreturn"
      => ([])
  | %try "->" BOMType
      => ([BOMType])
  | %try "->" "(" BOMType ("," BOMType)* ")"
      => (BOMType::SR)
  ;

FunParams
  : "(" Params? (")" => ([]) | "/" Params ")" => (Params))
      => (Option.getOpt (Params, []), SR)
  ;

Params
  : VarPat ("," VarPat)*
      => (VarPat::SR)
  ;
